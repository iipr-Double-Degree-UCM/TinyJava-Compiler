
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package syntactic_analyzer;

import java.util.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import error_handle.Errors;
import lexical_analyzer.LexicalAnalyzerTiny;
import lexical_analyzer.LexicalUnit;
import syntactic_analyzer.syntax.*;
import syntactic_analyzer.syntax.Statement.*;
import syntactic_analyzer.syntax.Expression.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SyntacticAnalyzerTiny extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return LexicalClass.class;
}

  /** Default constructor. */
  @Deprecated
  public SyntacticAnalyzerTiny() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SyntacticAnalyzerTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntacticAnalyzerTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\004\007\000\002\002\004\000\002\004" +
    "\006\000\002\005\004\000\002\005\003\000\002\006\010" +
    "\000\002\006\010\000\002\007\005\000\002\007\004\000" +
    "\002\010\005\000\002\010\005\000\002\044\005\000\002" +
    "\011\004\000\002\011\003\000\002\013\010\000\002\012" +
    "\014\000\002\012\013\000\002\012\014\000\002\012\013" +
    "\000\002\012\011\000\002\012\011\000\002\045\005\000" +
    "\002\045\004\000\002\046\005\000\002\046\003\000\002" +
    "\047\004\000\002\014\004\000\002\014\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\004\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\004\000\002" +
    "\015\004\000\002\017\012\000\002\016\004\000\002\016" +
    "\006\000\002\025\005\000\002\026\005\000\002\027\005" +
    "\000\002\043\006\000\002\052\014\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\020\007\000\002\021\013\000\002\021" +
    "\007\000\002\022\015\000\002\023\007\000\002\030\004" +
    "\000\002\030\003\000\002\031\007\000\002\024\010\000" +
    "\002\024\007\000\002\050\005\000\002\050\003\000\002" +
    "\042\010\000\002\042\007\000\002\032\005\000\002\032" +
    "\003\000\002\033\005\000\002\033\003\000\002\034\005" +
    "\000\002\034\005\000\002\034\003\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\003\000\002\036\005\000\002\036\005\000\002\036" +
    "\003\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\003\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\003\000\002\041\005\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\002\003\000" +
    "\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\006\004\004\005\007\001\002\000\004\031" +
    "\u0104\001\002\000\006\004\ufffd\005\ufffd\001\002\000\004" +
    "\002\u0103\001\002\000\004\057\023\001\002\000\006\004" +
    "\011\005\007\001\002\000\004\031\013\001\002\000\006" +
    "\004\ufffe\005\ufffe\001\002\000\030\013\043\014\050\015" +
    "\022\017\047\022\044\023\035\024\036\025\040\026\015" +
    "\056\021\057\023\001\002\000\004\056\021\001\002\000" +
    "\006\033\uffce\056\uffce\001\002\000\004\037\252\001\002" +
    "\000\004\037\251\001\002\000\034\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\017\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\032\uffe0\056\uffe0\057\uffe0\001\002\000\056\021" +
    "\uff9e\027\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044" +
    "\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\054\uff9e\055\uff9e\001\002\000\026\027\066\040\073\041" +
    "\056\047\057\056\021\060\072\061\077\062\063\063\062" +
    "\064\101\001\002\000\010\027\uff9d\031\uff9d\056\uff9d\001" +
    "\002\000\034\012\uffde\013\uffde\014\uffde\015\uffde\017\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\032\uffde\056" +
    "\uffde\057\uffde\001\002\000\034\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\017\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\032\uffdd\056\uffdd\057\uffdd\001\002\000\010\021\164" +
    "\033\146\035\233\001\002\000\004\037\232\001\002\000" +
    "\004\037\231\001\002\000\004\037\230\001\002\000\004" +
    "\037\227\001\002\000\006\033\214\056\021\001\002\000" +
    "\032\013\043\014\050\015\022\017\047\022\044\023\035" +
    "\024\036\025\040\026\015\032\212\056\021\057\023\001" +
    "\002\000\006\033\uffd0\056\uffd0\001\002\000\006\033\uffd1" +
    "\056\uffd1\001\002\000\004\021\210\001\002\000\006\033" +
    "\uffcf\056\uffcf\001\002\000\004\037\207\001\002\000\004" +
    "\021\205\001\002\000\026\027\066\040\073\041\056\047" +
    "\057\056\021\060\072\061\077\062\063\063\062\064\101" +
    "\001\002\000\006\033\uffd2\056\uffd2\001\002\000\034\012" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\017\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\032\uffe6\056\uffe6\057\uffe6\001" +
    "\002\000\034\012\uffdf\013\uffdf\014\uffdf\015\uffdf\017\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\032\uffdf\056" +
    "\uffdf\057\uffdf\001\002\000\026\027\066\040\073\041\056" +
    "\047\057\056\021\060\072\061\077\062\063\063\062\064" +
    "\101\001\002\000\004\027\051\001\002\000\004\056\021" +
    "\001\002\000\004\021\164\001\002\000\004\037\054\001" +
    "\002\000\026\027\066\040\073\041\056\047\057\056\021" +
    "\060\072\061\077\062\063\063\062\064\101\001\002\000" +
    "\034\030\uffb9\031\uffb9\034\uffb9\036\uffb9\037\uffb9\045\uffb9" +
    "\046\uffb9\050\107\051\110\052\111\053\112\054\uffb9\055" +
    "\uffb9\001\002\000\026\027\066\040\073\041\056\047\057" +
    "\056\021\060\072\061\077\062\063\063\062\064\101\001" +
    "\002\000\026\027\066\040\073\041\056\047\057\056\021" +
    "\060\072\061\077\062\063\063\062\064\101\001\002\000" +
    "\046\030\uffb1\031\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\120\043\121\044\117\045\uffb1\046\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\001\002" +
    "\000\024\030\uffbc\031\uffbc\034\uffbc\036\uffbc\037\uffbc\045" +
    "\105\046\104\054\uffbc\055\uffbc\001\002\000\046\030\uffa6" +
    "\031\uffa6\034\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\uffa6\001\002\000\046\030" +
    "\uffa3\031\uffa3\034\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\001\002\000\046" +
    "\030\uffa9\031\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\001\002\000" +
    "\052\030\uffa7\031\uffa7\033\146\034\uffa7\035\147\036\uffa7" +
    "\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\001\002\000\026\027\066\040\073\041\056\047" +
    "\057\056\021\060\072\061\077\062\063\063\062\064\101" +
    "\001\002\000\006\037\133\055\134\001\002\000\046\030" +
    "\uffad\031\uffad\034\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\001\002\000\040" +
    "\030\uffb4\031\uffb4\034\uffb4\036\uffb4\037\uffb4\040\114\041" +
    "\115\045\uffb4\046\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\001\002\000\046\030\uffa2\031\uffa2\034" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\001\002\000\026\027\066\040\073" +
    "\041\056\047\057\056\021\060\072\061\077\062\063\063" +
    "\062\064\101\001\002\000\046\030\uffa1\031\uffa1\034\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\001\002\000\046\030\uff9f\031\uff9f\034" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f\052\uff9f\053" +
    "\uff9f\054\uff9f\055\uff9f\001\002\000\020\030\uffbe\031\uffbe" +
    "\034\uffbe\036\uffbe\037\uffbe\054\102\055\uffbe\001\002\000" +
    "\046\030\uffa4\031\uffa4\034\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\001\002" +
    "\000\046\030\uffa0\031\uffa0\034\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\001" +
    "\002\000\046\030\uffa5\031\uffa5\034\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\001\002\000\026\027\066\040\073\041\056\047\057\056" +
    "\021\060\072\061\077\062\063\063\062\064\101\001\002" +
    "\000\024\030\uffbd\031\uffbd\034\uffbd\036\uffbd\037\uffbd\045" +
    "\105\046\104\054\uffbd\055\uffbd\001\002\000\026\027\066" +
    "\040\073\041\056\047\057\056\021\060\072\061\077\062" +
    "\063\063\062\064\101\001\002\000\026\027\066\040\073" +
    "\041\056\047\057\056\021\060\072\061\077\062\063\063" +
    "\062\064\101\001\002\000\034\030\uffba\031\uffba\034\uffba" +
    "\036\uffba\037\uffba\045\uffba\046\uffba\050\107\051\110\052" +
    "\111\053\112\054\uffba\055\uffba\001\002\000\026\027\066" +
    "\040\073\041\056\047\057\056\021\060\072\061\077\062" +
    "\063\063\062\064\101\001\002\000\026\027\066\040\073" +
    "\041\056\047\057\056\021\060\072\061\077\062\063\063" +
    "\062\064\101\001\002\000\026\027\066\040\073\041\056" +
    "\047\057\056\021\060\072\061\077\062\063\063\062\064" +
    "\101\001\002\000\026\027\066\040\073\041\056\047\057" +
    "\056\021\060\072\061\077\062\063\063\062\064\101\001" +
    "\002\000\040\030\uffb5\031\uffb5\034\uffb5\036\uffb5\037\uffb5" +
    "\040\114\041\115\045\uffb5\046\uffb5\050\uffb5\051\uffb5\052" +
    "\uffb5\053\uffb5\054\uffb5\055\uffb5\001\002\000\026\027\066" +
    "\040\073\041\056\047\057\056\021\060\072\061\077\062" +
    "\063\063\062\064\101\001\002\000\026\027\066\040\073" +
    "\041\056\047\057\056\021\060\072\061\077\062\063\063" +
    "\062\064\101\001\002\000\046\030\uffb2\031\uffb2\034\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\120\043\121\044" +
    "\117\045\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\054\uffb2\055\uffb2\001\002\000\026\027\066\040\073\041" +
    "\056\047\057\056\021\060\072\061\077\062\063\063\062" +
    "\064\101\001\002\000\026\027\066\040\073\041\056\047" +
    "\057\056\021\060\072\061\077\062\063\063\062\064\101" +
    "\001\002\000\026\027\066\040\073\041\056\047\057\056" +
    "\021\060\072\061\077\062\063\063\062\064\101\001\002" +
    "\000\046\030\uffaf\031\uffaf\034\uffaf\036\uffaf\037\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\001" +
    "\002\000\046\030\uffb0\031\uffb0\034\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\001\002\000\046\030\uffae\031\uffae\034\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055" +
    "\uffae\001\002\000\046\030\uffb3\031\uffb3\034\uffb3\036\uffb3" +
    "\037\uffb3\040\uffb3\041\uffb3\042\120\043\121\044\117\045" +
    "\uffb3\046\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\001\002\000\040\030\uffb6\031\uffb6\034\uffb6\036" +
    "\uffb6\037\uffb6\040\114\041\115\045\uffb6\046\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\001\002\000" +
    "\040\030\uffb7\031\uffb7\034\uffb7\036\uffb7\037\uffb7\040\114" +
    "\041\115\045\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\001\002\000\040\030\uffb8\031\uffb8" +
    "\034\uffb8\036\uffb8\037\uffb8\040\114\041\115\045\uffb8\046" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\001\002\000\034\030\uffbb\031\uffbb\034\uffbb\036\uffbb\037" +
    "\uffbb\045\uffbb\046\uffbb\050\107\051\110\052\111\053\112" +
    "\054\uffbb\055\uffbb\001\002\000\046\030\uffac\031\uffac\034" +
    "\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\050\uffac\051\uffac\052\uffac\053" +
    "\uffac\054\uffac\055\uffac\001\002\000\004\056\021\001\002" +
    "\000\026\027\066\040\073\041\056\047\057\056\021\060" +
    "\072\061\077\062\063\063\062\064\101\001\002\000\020" +
    "\030\uffbf\031\uffbf\034\uffbf\036\uffbf\037\uffbf\054\102\055" +
    "\uffbf\001\002\000\004\030\137\001\002\000\004\031\140" +
    "\001\002\000\030\013\043\014\050\015\022\017\047\022" +
    "\044\023\035\024\036\025\040\026\015\056\021\057\023" +
    "\001\002\000\032\013\043\014\050\015\022\017\047\022" +
    "\044\023\035\024\036\025\040\026\015\032\142\056\021" +
    "\057\023\001\002\000\034\012\uffca\013\uffca\014\uffca\015" +
    "\uffca\017\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\032\uffca\056\uffca\057\uffca\001\002\000\034\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\017\uffe7\022\uffe7\023\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\032\uffe7\056\uffe7\057\uffe7\001\002\000" +
    "\006\030\145\055\134\001\002\000\046\030\uffa8\031\uffa8" +
    "\034\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\001\002\000\026\027\066\040" +
    "\073\041\056\047\057\056\021\060\072\061\077\062\063" +
    "\063\062\064\101\001\002\000\004\056\021\001\002\000" +
    "\050\027\151\030\ufff6\031\ufff6\034\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\001\002\000\030\027\066\030\152\040\073\041\056\047" +
    "\057\056\021\060\072\061\077\062\063\063\062\064\101" +
    "\001\002\000\046\030\uffc0\031\uffc0\034\uffc0\036\uffc0\037" +
    "\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0" +
    "\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055" +
    "\uffc0\001\002\000\010\030\uffc2\036\uffc2\055\134\001\002" +
    "\000\006\030\156\036\155\001\002\000\026\027\066\040" +
    "\073\041\056\047\057\056\021\060\072\061\077\062\063" +
    "\063\062\064\101\001\002\000\046\030\uffc1\031\uffc1\034" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\001\002\000\010\030\uffc3\036\uffc3" +
    "\055\134\001\002\000\006\034\161\055\134\001\002\000" +
    "\050\021\uffd4\030\uffd4\031\uffd4\034\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\001\002\000\046\030\uffaa\031\uffaa\034\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa" +
    "\046\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\001\002\000\046\030\uffab\031\uffab\034\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab" +
    "\055\uffab\001\002\000\026\027\066\040\073\041\056\047" +
    "\057\056\021\060\072\061\077\062\063\063\062\064\101" +
    "\001\002\000\010\030\uffd7\037\uffd7\055\134\001\002\000" +
    "\006\031\167\055\134\001\002\000\004\020\171\001\002" +
    "\000\006\020\uffc7\032\uffc7\001\002\000\004\063\175\001" +
    "\002\000\006\020\171\032\174\001\002\000\006\020\uffc8" +
    "\032\uffc8\001\002\000\034\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\017\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\032\uffc9\056\uffc9\057\uffc9\001\002\000\004\031\176\001" +
    "\002\000\030\013\043\014\050\015\022\017\047\022\044" +
    "\023\035\024\036\025\040\026\015\056\021\057\023\001" +
    "\002\000\032\013\043\014\050\015\022\017\047\022\044" +
    "\023\035\024\036\025\040\026\015\032\200\056\021\057" +
    "\023\001\002\000\006\020\uffc6\032\uffc6\001\002\000\006" +
    "\031\202\055\134\001\002\000\030\013\043\014\050\015" +
    "\022\017\047\022\044\023\035\024\036\025\040\026\015" +
    "\056\021\057\023\001\002\000\032\013\043\014\050\015" +
    "\022\017\047\022\044\023\035\024\036\025\040\026\015" +
    "\032\204\056\021\057\023\001\002\000\034\012\uffcd\013" +
    "\uffcd\014\uffcd\015\uffcd\017\uffcd\022\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\032\uffcd\056\uffcd\057\uffcd\001\002\000" +
    "\026\027\066\040\073\041\056\047\057\056\021\060\072" +
    "\061\077\062\063\063\062\064\101\001\002\000\006\037" +
    "\uffd5\055\134\001\002\000\034\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\017\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\032\uffe3\056\uffe3\057\uffe3\001\002\000\026\027\066" +
    "\040\073\041\056\047\057\056\021\060\072\061\077\062" +
    "\063\063\062\064\101\001\002\000\006\037\uffd6\055\134" +
    "\001\002\000\004\002\001\001\002\000\006\021\225\037" +
    "\uffd9\001\002\000\004\034\215\001\002\000\004\056\021" +
    "\001\002\000\004\021\217\001\002\000\004\006\220\001" +
    "\002\000\014\022\044\023\035\024\036\025\040\026\015" +
    "\001\002\000\004\033\222\001\002\000\004\063\223\001" +
    "\002\000\004\034\224\001\002\000\004\037\uffd3\001\002" +
    "\000\026\027\066\040\073\041\056\047\057\056\021\060" +
    "\072\061\077\062\063\063\062\064\101\001\002\000\006" +
    "\037\uffd8\055\134\001\002\000\034\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\017\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\032\uffe1\056\uffe1\057\uffe1\001\002\000\034\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\017\uffe4\022\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\032\uffe4\056\uffe4\057\uffe4\001" +
    "\002\000\034\012\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\032\uffe2\056" +
    "\uffe2\057\uffe2\001\002\000\034\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\017\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\032\uffe5\056\uffe5\057\uffe5\001\002\000\004\056\021" +
    "\001\002\000\006\021\ufff6\027\235\001\002\000\030\027" +
    "\066\030\236\040\073\041\056\047\057\056\021\060\072" +
    "\061\077\062\063\063\062\064\101\001\002\000\004\037" +
    "\uffc4\001\002\000\006\030\240\036\155\001\002\000\004" +
    "\037\uffc5\001\002\000\006\031\242\055\134\001\002\000" +
    "\030\013\043\014\050\015\022\017\047\022\044\023\035" +
    "\024\036\025\040\026\015\056\021\057\023\001\002\000" +
    "\032\013\043\014\050\015\022\017\047\022\044\023\035" +
    "\024\036\025\040\026\015\032\244\056\021\057\023\001" +
    "\002\000\036\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\245" +
    "\017\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\032" +
    "\uffcb\056\uffcb\057\uffcb\001\002\000\004\031\246\001\002" +
    "\000\030\013\043\014\050\015\022\017\047\022\044\023" +
    "\035\024\036\025\040\026\015\056\021\057\023\001\002" +
    "\000\032\013\043\014\050\015\022\017\047\022\044\023" +
    "\035\024\036\025\040\026\015\032\250\056\021\057\023" +
    "\001\002\000\034\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\032\uffcc" +
    "\056\uffcc\057\uffcc\001\002\000\034\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\017\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\032\uffdb\056\uffdb\057\uffdb\001\002\000\034\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\025\uffdc\026\uffdc\032\uffdc\056\uffdc\057\uffdc\001" +
    "\002\000\004\021\254\001\002\000\004\006\255\001\002" +
    "\000\004\057\023\001\002\000\004\027\257\001\002\000" +
    "\026\027\066\040\073\041\056\047\057\056\021\060\072" +
    "\061\077\062\063\063\062\064\101\001\002\000\006\030" +
    "\261\036\155\001\002\000\004\037\uffda\001\002\000\004" +
    "\031\263\001\002\000\006\007\271\010\266\001\002\000" +
    "\006\007\374\010\373\001\002\000\010\007\ufff4\010\ufff4" +
    "\032\ufff4\001\002\000\014\022\044\023\035\024\036\025" +
    "\040\026\015\001\002\000\006\007\271\010\266\001\002" +
    "\000\004\037\312\001\002\000\016\022\044\023\035\024" +
    "\036\025\040\026\015\057\023\001\002\000\004\027\276" +
    "\001\002\000\004\056\021\001\002\000\004\037\ufff8\001" +
    "\002\000\004\031\307\001\002\000\016\022\044\023\035" +
    "\024\036\025\040\026\015\030\300\001\002\000\004\056" +
    "\021\001\002\000\004\031\uffeb\001\002\000\006\030\304" +
    "\036\303\001\002\000\006\030\uffe9\036\uffe9\001\002\000" +
    "\014\022\044\023\035\024\036\025\040\026\015\001\002" +
    "\000\004\031\uffec\001\002\000\006\030\uffea\036\uffea\001" +
    "\002\000\006\030\uffe8\036\uffe8\001\002\000\030\013\043" +
    "\014\050\015\022\017\047\022\044\023\035\024\036\025" +
    "\040\026\015\056\021\057\023\001\002\000\032\013\043" +
    "\014\050\015\022\017\047\022\044\023\035\024\036\025" +
    "\040\026\015\032\311\056\021\057\023\001\002\000\010" +
    "\007\ufff3\010\ufff3\032\ufff3\001\002\000\010\007\ufff9\010" +
    "\ufff9\032\ufff9\001\002\000\010\007\321\010\316\032\317" +
    "\001\002\000\004\037\315\001\002\000\010\007\ufffa\010" +
    "\ufffa\032\ufffa\001\002\000\016\011\345\022\044\023\035" +
    "\024\036\025\040\026\015\001\002\000\006\004\ufffc\005" +
    "\ufffc\001\002\000\010\007\ufff5\010\ufff5\032\ufff5\001\002" +
    "\000\016\011\322\022\044\023\035\024\036\025\040\026" +
    "\015\001\002\000\004\056\021\001\002\000\004\056\021" +
    "\001\002\000\004\027\276\001\002\000\004\031\326\001" +
    "\002\000\032\012\330\013\043\014\050\015\022\017\047" +
    "\022\044\023\035\024\036\025\040\026\015\056\021\057" +
    "\023\001\002\000\032\012\334\013\043\014\050\015\022" +
    "\017\047\022\044\023\035\024\036\025\040\026\015\056" +
    "\021\057\023\001\002\000\026\027\066\040\073\041\056" +
    "\047\057\056\021\060\072\061\077\062\063\063\062\064" +
    "\101\001\002\000\006\037\332\055\134\001\002\000\004" +
    "\032\333\001\002\000\010\007\ufff1\010\ufff1\032\ufff1\001" +
    "\002\000\026\027\066\040\073\041\056\047\057\056\021" +
    "\060\072\061\077\062\063\063\062\064\101\001\002\000" +
    "\006\037\336\055\134\001\002\000\004\032\337\001\002" +
    "\000\010\007\ufff2\010\ufff2\032\ufff2\001\002\000\004\027" +
    "\276\001\002\000\004\031\342\001\002\000\030\013\043" +
    "\014\050\015\022\017\047\022\044\023\035\024\036\025" +
    "\040\026\015\056\021\057\023\001\002\000\032\013\043" +
    "\014\050\015\022\017\047\022\044\023\035\024\036\025" +
    "\040\026\015\032\344\056\021\057\023\001\002\000\010" +
    "\007\uffee\010\uffee\032\uffee\001\002\000\004\056\021\001" +
    "\002\000\004\056\021\001\002\000\004\027\276\001\002" +
    "\000\004\031\351\001\002\000\032\012\353\013\043\014" +
    "\050\015\022\017\047\022\044\023\035\024\036\025\040" +
    "\026\015\056\021\057\023\001\002\000\032\012\357\013" +
    "\043\014\050\015\022\017\047\022\044\023\035\024\036" +
    "\025\040\026\015\056\021\057\023\001\002\000\026\027" +
    "\066\040\073\041\056\047\057\056\021\060\072\061\077" +
    "\062\063\063\062\064\101\001\002\000\006\037\355\055" +
    "\134\001\002\000\004\032\356\001\002\000\010\007\uffef" +
    "\010\uffef\032\uffef\001\002\000\026\027\066\040\073\041" +
    "\056\047\057\056\021\060\072\061\077\062\063\063\062" +
    "\064\101\001\002\000\006\037\361\055\134\001\002\000" +
    "\004\032\362\001\002\000\010\007\ufff0\010\ufff0\032\ufff0" +
    "\001\002\000\004\027\276\001\002\000\004\031\365\001" +
    "\002\000\030\013\043\014\050\015\022\017\047\022\044" +
    "\023\035\024\036\025\040\026\015\056\021\057\023\001" +
    "\002\000\032\013\043\014\050\015\022\017\047\022\044" +
    "\023\035\024\036\025\040\026\015\032\367\056\021\057" +
    "\023\001\002\000\010\007\uffed\010\uffed\032\uffed\001\002" +
    "\000\004\056\021\001\002\000\004\037\ufff7\001\002\000" +
    "\010\007\u0102\010\266\032\u0101\001\002\000\016\011\345" +
    "\022\044\023\035\024\036\025\040\026\015\001\002\000" +
    "\016\011\322\022\044\023\035\024\036\025\040\026\015" +
    "\001\002\000\004\056\021\001\002\000\006\027\276\037" +
    "\ufff8\001\002\000\004\056\021\001\002\000\006\027\276" +
    "\037\ufff7\001\002\000\006\004\ufffb\005\ufffb\001\002\000" +
    "\014\022\044\023\035\024\036\025\040\026\015\001\002" +
    "\000\004\002\000\001\002\000\030\013\043\014\050\015" +
    "\022\017\047\022\044\023\035\024\036\025\040\026\015" +
    "\056\021\057\023\001\002\000\032\013\043\014\050\015" +
    "\022\017\047\022\044\023\035\024\036\025\040\026\015" +
    "\032\u0106\056\021\057\023\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\010\004\005\005\007\006\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\261\001\001\000\004\006\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\002\025\003\013\014\033" +
    "\015\044\016\030\017\026\020\017\021\024\022\045\023" +
    "\023\024\015\025\040\026\027\027\031\043\041\044\036" +
    "\051\032\052\016\001\001\000\004\002\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\064\032\240\033" +
    "\075\034\060\035\054\036\070\037\057\040\067\041\063" +
    "\042\077\043\074\044\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\212\001\001\000\044\002\025\003\013" +
    "\015\142\016\030\017\026\020\017\021\024\022\045\023" +
    "\023\024\015\025\040\026\027\027\031\043\041\044\036" +
    "\051\032\052\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\064\032\200\033\075\034" +
    "\060\035\054\036\070\037\057\040\067\041\063\042\077" +
    "\043\074\044\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\064\032\165\033\075" +
    "\034\060\035\054\036\070\037\057\040\067\041\063\042" +
    "\077\043\074\044\073\001\001\000\002\001\001\000\006" +
    "\002\051\025\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\064\032\066\033\075\034\060\035\054" +
    "\036\070\037\057\040\067\041\063\042\077\043\074\044" +
    "\073\001\001\000\002\001\001\000\016\002\064\040\162" +
    "\041\063\042\077\043\074\044\073\001\001\000\016\002" +
    "\064\040\161\041\063\042\077\043\074\044\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\064\032\143\033\075\034\060\035\054\036\070\037" +
    "\057\040\067\041\063\042\077\043\074\044\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\002\064\040\131\041\063\042\077" +
    "\043\074\044\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\064\034\102\035\054\036" +
    "\070\037\057\040\067\041\063\042\077\043\074\044\073" +
    "\001\001\000\002\001\001\000\024\002\064\035\130\036" +
    "\070\037\057\040\067\041\063\042\077\043\074\044\073" +
    "\001\001\000\024\002\064\035\105\036\070\037\057\040" +
    "\067\041\063\042\077\043\074\044\073\001\001\000\002" +
    "\001\001\000\022\002\064\036\127\037\057\040\067\041" +
    "\063\042\077\043\074\044\073\001\001\000\022\002\064" +
    "\036\126\037\057\040\067\041\063\042\077\043\074\044" +
    "\073\001\001\000\022\002\064\036\125\037\057\040\067" +
    "\041\063\042\077\043\074\044\073\001\001\000\022\002" +
    "\064\036\112\037\057\040\067\041\063\042\077\043\074" +
    "\044\073\001\001\000\002\001\001\000\020\002\064\037" +
    "\124\040\067\041\063\042\077\043\074\044\073\001\001" +
    "\000\020\002\064\037\115\040\067\041\063\042\077\043" +
    "\074\044\073\001\001\000\002\001\001\000\016\002\064" +
    "\040\123\041\063\042\077\043\074\044\073\001\001\000" +
    "\016\002\064\040\122\041\063\042\077\043\074\044\073" +
    "\001\001\000\016\002\064\040\121\041\063\042\077\043" +
    "\074\044\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\051\025\135\001\001\000\030\002" +
    "\064\033\134\034\060\035\054\036\070\037\057\040\067" +
    "\041\063\042\077\043\074\044\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\002\025" +
    "\003\013\014\140\015\044\016\030\017\026\020\017\021" +
    "\024\022\045\023\023\024\015\025\040\026\027\027\031" +
    "\043\041\044\036\051\032\052\016\001\001\000\044\002" +
    "\025\003\013\015\142\016\030\017\026\020\017\021\024" +
    "\022\045\023\023\024\015\025\040\026\027\027\031\043" +
    "\041\044\036\051\032\052\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\064\032\157\033\075\034\060\035\054\036\070" +
    "\037\057\040\067\041\063\042\077\043\074\044\073\001" +
    "\001\000\004\002\147\001\001\000\002\001\001\000\034" +
    "\002\064\032\152\033\075\034\060\035\054\036\070\037" +
    "\057\040\067\041\063\042\077\043\074\044\073\050\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\064\032\156\033\075\034\060\035\054" +
    "\036\070\037\057\040\067\041\063\042\077\043\074\044" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\002\064\032\164\033\075\034\060\035\054" +
    "\036\070\037\057\040\067\041\063\042\077\043\074\044" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\171\031\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\002\025\003\013\014" +
    "\176\015\044\016\030\017\026\020\017\021\024\022\045" +
    "\023\023\024\015\025\040\026\027\027\031\043\041\044" +
    "\036\051\032\052\016\001\001\000\044\002\025\003\013" +
    "\015\142\016\030\017\026\020\017\021\024\022\045\023" +
    "\023\024\015\025\040\026\027\027\031\043\041\044\036" +
    "\051\032\052\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\002\025\003\013\014\202\015\044\016\030" +
    "\017\026\020\017\021\024\022\045\023\023\024\015\025" +
    "\040\026\027\027\031\043\041\044\036\051\032\052\016" +
    "\001\001\000\044\002\025\003\013\015\142\016\030\017" +
    "\026\020\017\021\024\022\045\023\023\024\015\025\040" +
    "\026\027\027\031\043\041\044\036\051\032\052\016\001" +
    "\001\000\002\001\001\000\032\002\064\032\205\033\075" +
    "\034\060\035\054\036\070\037\057\040\067\041\063\042" +
    "\077\043\074\044\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\002\064\032\210\033\075\034\060\035" +
    "\054\036\070\037\057\040\067\041\063\042\077\043\074" +
    "\044\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\064\032\225\033\075\034" +
    "\060\035\054\036\070\037\057\040\067\041\063\042\077" +
    "\043\074\044\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\233\001\001\000\002\001\001\000\034\002" +
    "\064\032\152\033\075\034\060\035\054\036\070\037\057" +
    "\040\067\041\063\042\077\043\074\044\073\050\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\002\025\003\013\014\242\015" +
    "\044\016\030\017\026\020\017\021\024\022\045\023\023" +
    "\024\015\025\040\026\027\027\031\043\041\044\036\051" +
    "\032\052\016\001\001\000\044\002\025\003\013\015\142" +
    "\016\030\017\026\020\017\021\024\022\045\023\023\024" +
    "\015\025\040\026\027\027\031\043\041\044\036\051\032" +
    "\052\016\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\002\025\003\013\014\246\015\044\016\030\017\026" +
    "\020\017\021\024\022\045\023\023\024\015\025\040\026" +
    "\027\027\031\043\041\044\036\051\032\052\016\001\001" +
    "\000\044\002\025\003\013\015\142\016\030\017\026\020" +
    "\017\021\024\022\045\023\023\024\015\025\040\026\027" +
    "\027\031\043\041\044\036\051\032\052\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\255\001\001\000" +
    "\002\001\001\000\034\002\064\032\152\033\075\034\060" +
    "\035\054\036\070\037\057\040\067\041\063\042\077\043" +
    "\074\044\073\050\257\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\266\010\267\011" +
    "\263\013\264\001\001\000\010\007\371\010\267\012\317" +
    "\001\001\000\002\001\001\000\004\051\367\001\001\000" +
    "\010\010\313\011\312\013\264\001\001\000\002\001\001" +
    "\000\006\003\271\051\272\001\001\000\004\045\274\001" +
    "\001\000\004\002\273\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\046\300\047\301\051\276\001\001\000" +
    "\004\002\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\047\304\051\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\002\025\003\013\014\307\015\044\016\030\017\026\020" +
    "\017\021\024\022\045\023\023\024\015\025\040\026\027" +
    "\027\031\043\041\044\036\051\032\052\016\001\001\000" +
    "\044\002\025\003\013\015\142\016\030\017\026\020\017" +
    "\021\024\022\045\023\023\024\015\025\040\026\027\027" +
    "\031\043\041\044\036\051\032\052\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\345\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\322\001" +
    "\001\000\004\002\337\001\001\000\004\002\323\001\001" +
    "\000\004\045\324\001\001\000\002\001\001\000\046\002" +
    "\025\003\013\014\326\015\044\016\030\017\026\020\017" +
    "\021\024\022\045\023\023\024\015\025\040\026\027\027" +
    "\031\043\041\044\036\051\032\052\016\001\001\000\044" +
    "\002\025\003\013\015\142\016\030\017\026\020\017\021" +
    "\024\022\045\023\023\024\015\025\040\026\027\027\031" +
    "\043\041\044\036\051\032\052\016\001\001\000\032\002" +
    "\064\032\330\033\075\034\060\035\054\036\070\037\057" +
    "\040\067\041\063\042\077\043\074\044\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\002\064\032\334\033\075\034\060\035\054\036\070\037" +
    "\057\040\067\041\063\042\077\043\074\044\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\340\001\001\000\002\001\001\000\046\002\025" +
    "\003\013\014\342\015\044\016\030\017\026\020\017\021" +
    "\024\022\045\023\023\024\015\025\040\026\027\027\031" +
    "\043\041\044\036\051\032\052\016\001\001\000\044\002" +
    "\025\003\013\015\142\016\030\017\026\020\017\021\024" +
    "\022\045\023\023\024\015\025\040\026\027\027\031\043" +
    "\041\044\036\051\032\052\016\001\001\000\002\001\001" +
    "\000\004\002\362\001\001\000\004\002\346\001\001\000" +
    "\004\045\347\001\001\000\002\001\001\000\046\002\025" +
    "\003\013\014\351\015\044\016\030\017\026\020\017\021" +
    "\024\022\045\023\023\024\015\025\040\026\027\027\031" +
    "\043\041\044\036\051\032\052\016\001\001\000\044\002" +
    "\025\003\013\015\142\016\030\017\026\020\017\021\024" +
    "\022\045\023\023\024\015\025\040\026\027\027\031\043" +
    "\041\044\036\051\032\052\016\001\001\000\032\002\064" +
    "\032\353\033\075\034\060\035\054\036\070\037\057\040" +
    "\067\041\063\042\077\043\074\044\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\002" +
    "\064\032\357\033\075\034\060\035\054\036\070\037\057" +
    "\040\067\041\063\042\077\043\074\044\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\363\001\001\000\002\001\001\000\046\002\025\003" +
    "\013\014\365\015\044\016\030\017\026\020\017\021\024" +
    "\022\045\023\023\024\015\025\040\026\027\027\031\043" +
    "\041\044\036\051\032\052\016\001\001\000\044\002\025" +
    "\003\013\015\142\016\030\017\026\020\017\021\024\022" +
    "\045\023\023\024\015\025\040\026\027\027\031\043\041" +
    "\044\036\051\032\052\016\001\001\000\002\001\001\000" +
    "\004\002\370\001\001\000\002\001\001\000\004\010\313" +
    "\001\001\000\004\051\376\001\001\000\004\051\374\001" +
    "\001\000\004\002\375\001\001\000\004\045\324\001\001" +
    "\000\004\002\377\001\001\000\004\045\347\001\001\000" +
    "\002\001\001\000\004\051\272\001\001\000\002\001\001" +
    "\000\046\002\025\003\013\014\u0104\015\044\016\030\017" +
    "\026\020\017\021\024\022\045\023\023\024\015\025\040" +
    "\026\027\027\031\043\041\044\036\051\032\052\016\001" +
    "\001\000\044\002\025\003\013\015\142\016\030\017\026" +
    "\020\017\021\024\022\045\023\023\024\015\025\040\026" +
    "\027\027\031\043\041\044\036\051\032\052\016\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntacticAnalyzerTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntacticAnalyzerTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntacticAnalyzerTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
	LexicalAnalyzerTiny lexer;

	public SyntacticAnalyzerTiny(LexicalAnalyzerTiny lexA, ComplexSymbolFactory sf) {
		super(lexA, sf);
		lexer = lexA;
	}

	/**
	 * When a syntactic error is found, the lexer calls this method before trying
	 * to recover from it.
	 */
	@Override
	public void syntax_error(Symbol cur_token) {	
		LexicalUnit s = (LexicalUnit) cur_token;
		try {
			throw new Errors(Errors.SYNTACTICERROR, "Syntax error: Unexpected symbol <" + s.getName() +
					 "> at line " + s.getLeft().getLine() + ", column " + s.getLeft().getColumn());
		} catch (Errors err) {
			err.print();
		}
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SyntacticAnalyzerTiny$actions {
  private final SyntacticAnalyzerTiny parser;

  /** Constructor */
  CUP$SyntacticAnalyzerTiny$actions(SyntacticAnalyzerTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzerTiny$do_action_part00000000(
    int                        CUP$SyntacticAnalyzerTiny$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzerTiny$parser,
    java.util.Stack            CUP$SyntacticAnalyzerTiny$stack,
    int                        CUP$SyntacticAnalyzerTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntacticAnalyzerTiny$result;

      /* select the action based on the action number */
      switch (CUP$SyntacticAnalyzerTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // P ::= CLASSLIST MAINKW OPENBRACE STMLIST CLOSEBRACE 
            {
              Program RESULT =null;
		Location clxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location clxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		List<MyClass> cl = (List<MyClass>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = Program.buildProgram(cl, sl); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("P",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= P EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		RESULT = start_val;
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntacticAnalyzerTiny$parser.done_parsing();
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // P ::= MAINKW OPENBRACE STMLIST CLOSEBRACE 
            {
              Program RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = Program.buildProgram(null, sl); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("P",2, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CLASSLIST ::= CLASSLIST CLASSDEF 
            {
              List<MyClass> RESULT =null;
		Location clxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location clxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<MyClass> cl = (List<MyClass>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		MyClass c = (MyClass)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 cl.add(c); RESULT = cl; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("CLASSLIST",3, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CLASSLIST ::= CLASSDEF 
            {
              List<MyClass> RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		MyClass c = (MyClass)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 List<MyClass> cl = new ArrayList<MyClass>(); cl.add(c); RESULT = cl; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("CLASSLIST",3, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CLASSDEF ::= CLASSKW CLASSNAME OPENBRACE ATTRIBLIST METHLIST CLOSEBRACE 
            {
              MyClass RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		Identifier n = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location alxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location alxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		List<Attribute> al = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location mlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location mlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Method> ml = (List<Method>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = MyClass.buildClass(n, al, ml); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("CLASSDEF",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CLASSDEF ::= CLASSKW CLASSNAME OPENBRACE METHLIST ATTRIBLIST CLOSEBRACE 
            {
              MyClass RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		Identifier n = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location mlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location mlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		List<Method> ml = (List<Method>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location alxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location alxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Attribute> al = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = MyClass.buildClass(n, al, ml); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("CLASSDEF",4, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ATTRIBLIST ::= ATTRIBLIST ATTRIBDECL SEMICOLON 
            {
              List<Attribute> RESULT =null;
		Location alxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location alxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		List<Attribute> al = (List<Attribute>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Attribute a = (Attribute)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 al.add(a); RESULT = al; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ATTRIBLIST",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ATTRIBLIST ::= ATTRIBDECL SEMICOLON 
            {
              List<Attribute> RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Attribute a = (Attribute)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 List<Attribute> al = new ArrayList<Attribute>(); al.add(a); RESULT = al; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ATTRIBLIST",5, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ATTRIBDECL ::= PUBLICKW BASICTYPE ID 
            {
              Attribute RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = Attribute.buildAttribute(txleft, ixright, true, t, i); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ATTRIBDECL",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ATTRIBDECL ::= PRIVATEKW BASICTYPE ID 
            {
              Attribute RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = Attribute.buildAttribute(txleft, ixright, false, t, i); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ATTRIBDECL",6, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ATTRIBOBJ ::= ID DOT ID 
            {
              AttribObject RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Identifier el = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new AttribObject(ixleft, elxright, i, el); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ATTRIBOBJ",34, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // METHLIST ::= METHLIST METHOD 
            {
              List<Method> RESULT =null;
		Location mlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location mlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Method> ml = (List<Method>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Method m = (Method)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 ml.add(m); RESULT = ml; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("METHLIST",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // METHLIST ::= CONSTRUCTOR 
            {
              List<Method> RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Method c = (Method)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 List<Method> ml = new ArrayList<Method>(); ml.add(c); RESULT = ml; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("METHLIST",7, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONSTRUCTOR ::= PUBLICKW CLASSNAME MPARAMS OPENBRACE STMLIST CLOSEBRACE 
            {
              Method RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		List<Parameter> pl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = Constructor.buildConstructor(i, pl, s); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("CONSTRUCTOR",9, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE 
            {
              Method RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xright;
		List<Parameter> pl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		 RESULT = Method.buildMethod(true, t, i, pl, s, e); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("METHOD",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-9)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE 
            {
              Method RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).xright;
		List<Parameter> pl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		 RESULT = Method.buildMethod(true, t, i, pl, new ArrayList<Statement>(), e);   
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("METHOD",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE 
            {
              Method RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xright;
		List<Parameter> pl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		 RESULT = Method.buildMethod(false, t, i, pl, s, e); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("METHOD",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-9)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE 
            {
              Method RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).xright;
		List<Parameter> pl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		 RESULT = Method.buildMethod(false, t, i, pl, new ArrayList<Statement>(), e);   
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("METHOD",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // METHOD ::= PUBLICKW VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE 
            {
              Method RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		List<Parameter> pl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = VoidMethod.buildVoidMethod(true, i, pl, s); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("METHOD",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // METHOD ::= PRIVATEKW VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE 
            {
              Method RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		List<Parameter> pl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = VoidMethod.buildVoidMethod(false, i, pl, s);   
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("METHOD",8, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MPARAMS ::= OPENPAR MPARAMSLIST CLOSEPAR 
            {
              List<Parameter> RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Parameter> pl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = pl;	
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("MPARAMS",35, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // MPARAMS ::= OPENPAR CLOSEPAR 
            {
              List<Parameter> RESULT =null;
		 RESULT = new ArrayList<Parameter>();	
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("MPARAMS",35, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // MPARAMSLIST ::= MPARAMSLIST COMMA MPARAM 
            {
              List<Parameter> RESULT =null;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		List<Parameter> pl = (List<Parameter>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 pl.add(p); RESULT = pl;	
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("MPARAMSLIST",36, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MPARAMSLIST ::= MPARAM 
            {
              List<Parameter> RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 List<Parameter> pl = new ArrayList<Parameter>(); pl.add(p); RESULT = pl; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("MPARAMSLIST",36, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MPARAM ::= BASICTYPE ID 
            {
              Parameter RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new Parameter(t, i);	
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("MPARAM",37, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STMLIST ::= STMLIST STM 
            {
              List<Statement> RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 sl.add(s); RESULT = sl; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STMLIST",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // STMLIST ::= STM 
            {
              List<Statement> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 List<Statement> sl = new ArrayList<Statement>(); sl.add(s); RESULT = sl; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STMLIST",10, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STM ::= NEWDECL SEMICOLON 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STM ::= DECL SEMICOLON 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STM ::= ASSIGN SEMICOLON 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Assign s = (Assign)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STM ::= ASSIGNATTRIB SEMICOLON 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		AttribObjectAssign s = (AttribObjectAssign)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STM ::= ASSIGNARRAY SEMICOLON 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		ArrayAssign s = (ArrayAssign)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // STM ::= WHILE 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // STM ::= FOR 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // STM ::= SWITCH 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // STM ::= IF_ELSE 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // STM ::= VOIDMETHOBJ SEMICOLON 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // STM ::= ARRAYDECL SEMICOLON 
            {
              Statement RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = s; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("STM",11, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NEWDECL ::= CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR 
            {
              Statement RESULT =null;
		Location c1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xleft;
		Location c1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xright;
		Identifier c1 = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).value;
		Location c2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location c2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		Identifier c2 = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = new ObjectDeclaration(c1xleft, elxright, c1, i, c2, el); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("NEWDECL",13, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECL ::= BASICTYPE ID 
            {
              Statement RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = VariableDeclaration.variableDeclarationNoAssign(txleft, ixright, t, i); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("DECL",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECL ::= BASICTYPE ID ASSIGNSYM EXPR 
            {
              Statement RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = VariableDeclaration.variableDeclarationWithAssign(txleft, exright, t, i, e); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("DECL",12, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASSIGN ::= ID ASSIGNSYM EXPR 
            {
              Assign RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new Assign(ixleft, exright, i, e); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ASSIGN",19, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASSIGNATTRIB ::= ATTRIBOBJ ASSIGNSYM EXPR 
            {
              AttribObjectAssign RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		AttribObject a = (AttribObject)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new AttribObjectAssign(axleft, exright, a, e); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNATTRIB",20, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASSIGNARRAY ::= ARRAYELEM ASSIGNSYM EXPR 
            {
              ArrayAssign RESULT =null;
		Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		ArrayElement ae = (ArrayElement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new ArrayAssign(aexleft, exright, ae, e); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ASSIGNARRAY",21, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARRAYELEM ::= ID OPENBRACKET EXPR CLOSEBRACKET 
            {
              ArrayElement RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = new ArrayElement(ixleft, exright, i, e); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ARRAYELEM",33, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARRAYDECL ::= BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET 
            {
              Statement RESULT =null;
		Location t1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-9)).xleft;
		Location t1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-9)).xright;
		Integer t1 = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-9)).value;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).value;
		Location t2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location t2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		Integer t2 = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = new ArrayDeclaration(t1xleft, nxright, i, t1, t2, n); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ARRAYDECL",40, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-9)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BASICTYPE ::= INTKW 
            {
              Integer RESULT =null;
		 RESULT = ConstantValues.INTKW; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("BASICTYPE",39, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BASICTYPE ::= BOOLKW 
            {
              Integer RESULT =null;
		 RESULT = ConstantValues.BOOLKW; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("BASICTYPE",39, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BASICTYPE ::= DOUBLEKW 
            {
              Integer RESULT =null;
		 RESULT = ConstantValues.DOUBLEKW; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("BASICTYPE",39, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BASICTYPE ::= CHARKW 
            {
              Integer RESULT =null;
		 RESULT = ConstantValues.CHARKW; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("BASICTYPE",39, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BASICTYPE ::= STRINGKW 
            {
              Integer RESULT =null;
		 RESULT = ConstantValues.STRINGKW; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("BASICTYPE",39, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WHILE ::= WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE 
            {
              Statement RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = new While(cxleft, sxright, c, s); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF_ELSE ::= IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE 
            {
              Statement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-7)).value;
		Location s1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).xleft;
		Location s1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).xright;
		List<Statement> s1 = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).value;
		Location s2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location s2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> s2 = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = new IfElse(exleft, s2xright, e, s1, s2); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("IF_ELSE",15, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF_ELSE ::= IFKW EXPR OPENBRACE STMLIST CLOSEBRACE 
            {
              Statement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = new If(exleft, sxright, e, s); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("IF_ELSE",15, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FOR ::= FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE 
            {
              Statement RESULT =null;
		Location a1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)).xleft;
		Location a1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)).xright;
		Assign a1 = (Assign)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-8)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-6)).value;
		Location a2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location a2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		Assign a2 = (Assign)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = new For(a1xleft, sxright, a1, e, a2, s); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("FOR",16, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-10)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SWITCH ::= SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE 
            {
              Statement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location sbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<SwitchStatement> sb = (List<SwitchStatement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = new Switch(exleft, sbxright, e, sb); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SWITCHBODY ::= SWITCHBODY SWITCHSTM 
            {
              List<SwitchStatement> RESULT =null;
		Location sbxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location sbxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<SwitchStatement> sb = (List<SwitchStatement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		SwitchStatement s = (SwitchStatement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 sb.add(s); RESULT = sb; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("SWITCHBODY",22, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCHBODY ::= SWITCHSTM 
            {
              List<SwitchStatement> RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		SwitchStatement s = (SwitchStatement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 List<SwitchStatement> sb = new ArrayList<SwitchStatement>(); sb.add(s); RESULT = sb; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("SWITCHBODY",22, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SWITCHSTM ::= CASEKW INT OPENBRACE STMLIST CLOSEBRACE 
            {
              SwitchStatement RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = new SwitchStatement(nxleft, slxright, n, sl); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("SWITCHSTM",23, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VOIDMETHOBJ ::= ID DOT ID OPENPAR EXPRLIST CLOSEPAR 
            {
              Statement RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).xright;
		Identifier o = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		Identifier m = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = VoidMethCall.CallWithParams(oxleft, elxright, o, m, el); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("VOIDMETHOBJ",18, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VOIDMETHOBJ ::= ID DOT ID OPENPAR CLOSEPAR 
            {
              Statement RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		Identifier o = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Identifier m = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		 RESULT = VoidMethCall.CallNoParams(oxleft, mxright, o, m); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("VOIDMETHOBJ",18, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRLIST ::= EXPRLIST COMMA EXPR 
            {
              List<Expression> RESULT =null;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 el.add(e); RESULT = el; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLIST",38, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRLIST ::= EXPR 
            {
              List<Expression> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 List<Expression> el = new ArrayList<Expression>(); el.add(e); RESULT = el; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLIST",38, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // METHOBJ ::= ID DOT ID OPENPAR EXPRLIST CLOSEPAR 
            {
              Expression RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).xright;
		Identifier o = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).xright;
		Identifier m = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-3)).value;
		Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		List<Expression> el = (List<Expression>)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = MethodCall.CallWithParams(oxleft, elxright, o, m, el); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("METHOBJ",32, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-5)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // METHOBJ ::= ID DOT ID OPENPAR CLOSEPAR 
            {
              Expression RESULT =null;
		Location oxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xleft;
		Location oxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).xright;
		Identifier o = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)).value;
		Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Identifier m = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		 RESULT = MethodCall.CallNoParams(oxleft, mxright, o, m); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("METHOBJ",32, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-4)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPR ::= EXPR OR EXPRAND 
            {
              Expression RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e0 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e0xleft, e1xright, e0, ConstantValues.OR, e1); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPR ::= EXPRAND 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = e1; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPR",24, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRAND ::= EXPRAND AND EXPREQ 
            {
              Expression RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e1xleft, e2xright, e1, ConstantValues.AND, e2); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRAND",25, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRAND ::= EXPREQ 
            {
              Expression RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = e2; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRAND",25, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPREQ ::= EXPREQ EQ EXPRREL 
            {
              Expression RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e2xleft, e3xright, e2, ConstantValues.EQ, e3); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPREQ",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPREQ ::= EXPREQ DIST EXPRREL 
            {
              Expression RESULT =null;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e2xleft, e3xright, e2, ConstantValues.DIST, e3); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPREQ",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPREQ ::= EXPRREL 
            {
              Expression RESULT =null;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = e3; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPREQ",26, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRREL ::= EXPRREL LT EXPRADD 
            {
              Expression RESULT =null;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e4 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e3xleft, e4xright, e3 ,ConstantValues.LT, e4); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRREL",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRREL ::= EXPRREL GT EXPRADD 
            {
              Expression RESULT =null;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e4 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e3xleft, e4xright, e3, ConstantValues.GT, e4); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRREL",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRREL ::= EXPRREL LE EXPRADD 
            {
              Expression RESULT =null;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e4 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e3xleft, e4xright, e3, ConstantValues.LE, e4); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRREL",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRREL ::= EXPRREL GE EXPRADD 
            {
              Expression RESULT =null;
		Location e3xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e3xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e4 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e3xleft, e4xright, e3, ConstantValues.GE, e4); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRREL",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRREL ::= EXPRADD 
            {
              Expression RESULT =null;
		Location e4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e4 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = e4; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRREL",27, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRADD ::= EXPRADD ADD EXPRMULT 
            {
              Expression RESULT =null;
		Location e4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e4 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e5 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e4xleft, e5xright, e4, ConstantValues.ADD, e5); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRADD",28, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRADD ::= EXPRADD SUBS EXPRMULT 
            {
              Expression RESULT =null;
		Location e4xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e4xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e4 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e5 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e4xleft, e5xright, e4, ConstantValues.SUBS, e5); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRADD",28, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRADD ::= EXPRMULT 
            {
              Expression RESULT =null;
		Location e5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e5 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = e5; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRADD",28, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRMULT ::= EXPRMULT MULT EXPRUNARY 
            {
              Expression RESULT =null;
		Location e5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e5 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e6 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e5xleft, e6xright, e5, ConstantValues.MULT, e6); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRMULT",29, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRMULT ::= EXPRMULT DIV EXPRUNARY 
            {
              Expression RESULT =null;
		Location e5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e5 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e6 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e5xleft, e6xright, e5, ConstantValues.DIV, e6); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRMULT",29, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRMULT ::= EXPRMULT MOD EXPRUNARY 
            {
              Expression RESULT =null;
		Location e5xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xleft;
		Location e5xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).xright;
		Expression e5 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)).value;
		Location e6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e6 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BinExpression(e5xleft, e6xright, e5, ConstantValues.MOD, e6); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRMULT",29, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRMULT ::= EXPRUNARY 
            {
              Expression RESULT =null;
		Location e6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e6 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = e6; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRMULT",29, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRUNARY ::= ADD EXPRUNARY 
            {
              Expression RESULT =null;
		Location e6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e6 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new UnaryExpression(e6xleft, e6xright, e6, ConstantValues.ADD); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRUNARY",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRUNARY ::= SUBS EXPRUNARY 
            {
              Expression RESULT =null;
		Location e6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e6 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new UnaryExpression(e6xleft, e6xright, e6, ConstantValues.SUBS); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRUNARY",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRUNARY ::= NEG EXPRUNARY 
            {
              Expression RESULT =null;
		Location e6xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e6xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e6 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new UnaryExpression(e6xleft, e6xright, e6, ConstantValues.NEG); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRUNARY",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRUNARY ::= EXPRLAST 
            {
              Expression RESULT =null;
		Location e7xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location e7xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e7 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = e7; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRUNARY",30, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRLAST ::= OPENPAR EXPR CLOSEPAR 
            {
              Expression RESULT =null;
		Location e0xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xleft;
		Location e0xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).xright;
		Expression e0 = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-1)).value;
		 RESULT = e0; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLAST",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.elementAt(CUP$SyntacticAnalyzerTiny$top-2)), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRLAST ::= ID 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = i; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLAST",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRLAST ::= INT 
            {
              Expression RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new IntegerValue(ixleft, ixright, i); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLAST",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRLAST ::= DOUBLE 
            {
              Expression RESULT =null;
		Location dxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location dxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new DoubleValue(dxleft, dxright, d); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLAST",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRLAST ::= BOOLVAL 
            {
              Expression RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new BoolValue(bxleft, bxright, b);; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLAST",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRLAST ::= CHAR 
            {
              Expression RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		char c = (char)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new CharValue(cxleft, cxright, c); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLAST",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRLAST ::= STRING 
            {
              Expression RESULT =null;
		Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		String s = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = new StringValue(sxleft, sxright, s); 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLAST",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRLAST ::= ATTRIBOBJ 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		AttribObject e = (AttribObject)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLAST",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRLAST ::= METHOBJ 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLAST",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRLAST ::= ARRAYELEM 
            {
              Expression RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		ArrayElement e = (ArrayElement)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		 RESULT = e; 
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("EXPRLAST",31, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ID ::= IDENTIFIER 
            {
              Identifier RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		RESULT = new Identifier(ixleft, ixright, i);
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("ID",0, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CLASSNAME ::= CLASSNAMESTR 
            {
              Identifier RESULT =null;
		Location cnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xleft;
		Location cnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$SyntacticAnalyzerTiny$stack.peek()).xright;
		String cn = (String)((java_cup.runtime.Symbol) CUP$SyntacticAnalyzerTiny$stack.peek()).value;
		RESULT = new Identifier(cnxleft, cnxright, cn);
              CUP$SyntacticAnalyzerTiny$result = parser.getSymbolFactory().newSymbol("CLASSNAME",1, ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntacticAnalyzerTiny$stack.peek()), RESULT);
            }
          return CUP$SyntacticAnalyzerTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SyntacticAnalyzerTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SyntacticAnalyzerTiny$do_action(
    int                        CUP$SyntacticAnalyzerTiny$act_num,
    java_cup.runtime.lr_parser CUP$SyntacticAnalyzerTiny$parser,
    java.util.Stack            CUP$SyntacticAnalyzerTiny$stack,
    int                        CUP$SyntacticAnalyzerTiny$top)
    throws java.lang.Exception
    {
              return CUP$SyntacticAnalyzerTiny$do_action_part00000000(
                               CUP$SyntacticAnalyzerTiny$act_num,
                               CUP$SyntacticAnalyzerTiny$parser,
                               CUP$SyntacticAnalyzerTiny$stack,
                               CUP$SyntacticAnalyzerTiny$top);
    }
}

}
