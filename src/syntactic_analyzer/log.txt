===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [CLASSDEF ::= (*) CLASSKW CLASSNAME OPENBRACE ATTRIBLIST METHLIST CLOSEBRACE , {MAINKW CLASSKW }]
  [P ::= (*) MAINKW OPENBRACE STMLIST CLOSEBRACE , {EOF }]
  [CLASSLIST ::= (*) CLASSDEF , {MAINKW CLASSKW }]
  [$START ::= (*) P EOF , {EOF }]
  [CLASSDEF ::= (*) CLASSKW CLASSNAME OPENBRACE METHLIST ATTRIBLIST CLOSEBRACE , {MAINKW CLASSKW }]
  [CLASSLIST ::= (*) CLASSLIST CLASSDEF , {MAINKW CLASSKW }]
  [P ::= (*) CLASSLIST MAINKW OPENBRACE STMLIST CLOSEBRACE , {EOF }]
}
transition on CLASSLIST to state [5]
transition on CLASSKW to state [4]
transition on P to state [3]
transition on CLASSDEF to state [2]
transition on MAINKW to state [1]

-------------------
lalr_state [1]: {
  [P ::= MAINKW (*) OPENBRACE STMLIST CLOSEBRACE , {EOF }]
}
transition on OPENBRACE to state [257]

-------------------
lalr_state [2]: {
  [CLASSLIST ::= CLASSDEF (*) , {MAINKW CLASSKW }]
}

-------------------
lalr_state [3]: {
  [$START ::= P (*) EOF , {EOF }]
}
transition on EOF to state [256]

-------------------
lalr_state [4]: {
  [CLASSDEF ::= CLASSKW (*) CLASSNAME OPENBRACE ATTRIBLIST METHLIST CLOSEBRACE , {MAINKW CLASSKW }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {OPENBRACE }]
  [CLASSDEF ::= CLASSKW (*) CLASSNAME OPENBRACE METHLIST ATTRIBLIST CLOSEBRACE , {MAINKW CLASSKW }]
}
transition on CLASSNAMESTR to state [16]
transition on CLASSNAME to state [175]

-------------------
lalr_state [5]: {
  [CLASSDEF ::= (*) CLASSKW CLASSNAME OPENBRACE ATTRIBLIST METHLIST CLOSEBRACE , {MAINKW CLASSKW }]
  [CLASSDEF ::= (*) CLASSKW CLASSNAME OPENBRACE METHLIST ATTRIBLIST CLOSEBRACE , {MAINKW CLASSKW }]
  [CLASSLIST ::= CLASSLIST (*) CLASSDEF , {MAINKW CLASSKW }]
  [P ::= CLASSLIST (*) MAINKW OPENBRACE STMLIST CLOSEBRACE , {EOF }]
}
transition on CLASSKW to state [4]
transition on CLASSDEF to state [7]
transition on MAINKW to state [6]

-------------------
lalr_state [6]: {
  [P ::= CLASSLIST MAINKW (*) OPENBRACE STMLIST CLOSEBRACE , {EOF }]
}
transition on OPENBRACE to state [8]

-------------------
lalr_state [7]: {
  [CLASSLIST ::= CLASSLIST CLASSDEF (*) , {MAINKW CLASSKW }]
}

-------------------
lalr_state [8]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [P ::= CLASSLIST MAINKW OPENBRACE (*) STMLIST CLOSEBRACE , {EOF }]
  [STMLIST ::= (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [25]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [9]: {
  [NEWDECL ::= CLASSNAME (*) ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [168]

-------------------
lalr_state [10]: {
  [BASICTYPE ::= STRINGKW (*) , {OPENBRACKET IDENTIFIER }]
}

-------------------
lalr_state [11]: {
  [STM ::= VOIDMETHOBJ (*) SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on SEMICOLON to state [167]

-------------------
lalr_state [12]: {
  [STM ::= ARRAYDECL (*) SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on SEMICOLON to state [166]

-------------------
lalr_state [13]: {
  [STM ::= WHILE (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [14]: {
  [ID ::= IDENTIFIER (*) , {ASSIGNSYM OPENPAR CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [15]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {OPENBRACE AND OR }]
  [EXPRLAST ::= (*) INT , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {OPENBRACE ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {OPENBRACE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {OPENBRACE ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {OPENBRACE DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {OPENBRACE OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {OPENBRACE ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {OPENBRACE DIST EQ AND OR }]
  [IF_ELSE ::= IFKW (*) EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [EXPRLAST ::= (*) CHAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {OPENBRACE OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACE OPENBRACKET DOT ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {OPENBRACE DIST EQ AND OR }]
  [IF_ELSE ::= IFKW (*) EXPR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [158]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [16]: {
  [CLASSNAME ::= CLASSNAMESTR (*) , {OPENPAR OPENBRACE IDENTIFIER }]
}

-------------------
lalr_state [17]: {
  [STM ::= SWITCH (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [18]: {
  [STM ::= IF_ELSE (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [19]: {
  [VOIDMETHOBJ ::= ID (*) DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [ARRAYELEM ::= ID (*) OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [ASSIGN ::= ID (*) ASSIGNSYM EXPR , {SEMICOLON }]
  [VOIDMETHOBJ ::= ID (*) DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [ATTRIBOBJ ::= ID (*) DOT ID , {ASSIGNSYM }]
}
transition on DOT to state [152]
transition on OPENBRACKET to state [99]
transition on ASSIGNSYM to state [113]

-------------------
lalr_state [20]: {
  [STM ::= NEWDECL (*) SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on SEMICOLON to state [151]

-------------------
lalr_state [21]: {
  [STM ::= ASSIGNATTRIB (*) SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on SEMICOLON to state [150]

-------------------
lalr_state [22]: {
  [STM ::= DECL (*) SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on SEMICOLON to state [149]

-------------------
lalr_state [23]: {
  [STM ::= ASSIGNARRAY (*) SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on SEMICOLON to state [148]

-------------------
lalr_state [24]: {
  [ARRAYDECL ::= BASICTYPE (*) OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [DECL ::= BASICTYPE (*) ID , {SEMICOLON }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM SEMICOLON }]
  [DECL ::= BASICTYPE (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
}
transition on IDENTIFIER to state [14]
transition on OPENBRACKET to state [137]
transition on ID to state [136]

-------------------
lalr_state [25]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [P ::= CLASSLIST MAINKW OPENBRACE STMLIST (*) CLOSEBRACE , {EOF }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]
transition on CLOSEBRACE to state [135]

-------------------
lalr_state [26]: {
  [BASICTYPE ::= DOUBLEKW (*) , {OPENBRACKET IDENTIFIER }]
}

-------------------
lalr_state [27]: {
  [BASICTYPE ::= BOOLKW (*) , {OPENBRACKET IDENTIFIER }]
}

-------------------
lalr_state [28]: {
  [ASSIGNATTRIB ::= ATTRIBOBJ (*) ASSIGNSYM EXPR , {SEMICOLON }]
}
transition on ASSIGNSYM to state [133]

-------------------
lalr_state [29]: {
  [BASICTYPE ::= CHARKW (*) , {OPENBRACKET IDENTIFIER }]
}

-------------------
lalr_state [30]: {
  [STM ::= ASSIGN (*) SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on SEMICOLON to state [132]

-------------------
lalr_state [31]: {
  [ASSIGNARRAY ::= ARRAYELEM (*) ASSIGNSYM EXPR , {SEMICOLON }]
}
transition on ASSIGNSYM to state [130]

-------------------
lalr_state [32]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {OPENBRACE AND OR }]
  [EXPRLAST ::= (*) INT , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {OPENBRACE ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {OPENBRACE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {OPENBRACE ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {OPENBRACE DIST EQ AND OR }]
  [WHILE ::= WHILEKW (*) EXPR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [EXPRLAST ::= (*) BOOLVAL , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {OPENBRACE OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {OPENBRACE ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {OPENBRACE DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {OPENBRACE OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACE OPENBRACKET DOT ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {OPENBRACE DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [126]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [33]: {
  [BASICTYPE ::= INTKW (*) , {OPENBRACKET IDENTIFIER }]
}

-------------------
lalr_state [34]: {
  [STMLIST ::= STM (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [35]: {
  [STM ::= FOR (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [36]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {OPENBRACE AND OR }]
  [EXPRLAST ::= (*) INT , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {OPENBRACE ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {OPENBRACE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [SWITCH ::= SWITCHKW (*) EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {OPENBRACE ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {OPENBRACE DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {OPENBRACE OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {OPENBRACE ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {OPENBRACE DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {OPENBRACE DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {OPENBRACE OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACE OPENBRACKET DOT ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {OPENBRACE DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {OPENBRACE ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [115]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [37]: {
  [FOR ::= FORKW (*) OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on OPENPAR to state [38]

-------------------
lalr_state [38]: {
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [FOR ::= FORKW OPENPAR (*) ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM }]
}
transition on ASSIGN to state [40]
transition on IDENTIFIER to state [14]
transition on ID to state [39]

-------------------
lalr_state [39]: {
  [ASSIGN ::= ID (*) ASSIGNSYM EXPR , {CLOSEPAR SEMICOLON }]
}
transition on ASSIGNSYM to state [113]

-------------------
lalr_state [40]: {
  [FOR ::= FORKW OPENPAR ASSIGN (*) SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on SEMICOLON to state [41]

-------------------
lalr_state [41]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) INT , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [FOR ::= FORKW OPENPAR ASSIGN SEMICOLON (*) EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {SEMICOLON OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {SEMICOLON OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACKET DOT SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [52]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [42]: {
  [EXPRREL ::= EXPRREL (*) GE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL (*) LT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL (*) LE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= EXPRREL (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRREL ::= EXPRREL (*) GT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
}
transition on GE to state [71]
transition on LE to state [70]
transition on GT to state [69]
transition on LT to state [68]

-------------------
lalr_state [43]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= SUBS (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on CHAR to state [48]
transition on NEG to state [44]
transition on IDENTIFIER to state [14]
transition on METHOBJ to state [61]
transition on ID to state [50]
transition on DOUBLE to state [62]
transition on EXPRUNARY to state [112]
transition on ADD to state [56]
transition on EXPRLAST to state [49]
transition on STRING to state [55]
transition on SUBS to state [43]
transition on ATTRIBOBJ to state [57]
transition on ARRAYELEM to state [58]
transition on OPENPAR to state [51]
transition on BOOLVAL to state [60]
transition on INT to state [47]

-------------------
lalr_state [44]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= NEG (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on CHAR to state [48]
transition on NEG to state [44]
transition on IDENTIFIER to state [14]
transition on METHOBJ to state [61]
transition on ID to state [50]
transition on EXPRUNARY to state [111]
transition on DOUBLE to state [62]
transition on ADD to state [56]
transition on EXPRLAST to state [49]
transition on STRING to state [55]
transition on SUBS to state [43]
transition on ATTRIBOBJ to state [57]
transition on ARRAYELEM to state [58]
transition on OPENPAR to state [51]
transition on BOOLVAL to state [60]
transition on INT to state [47]

-------------------
lalr_state [45]: {
  [EXPRMULT ::= EXPRMULT (*) DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= EXPRMULT (*) MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= EXPRMULT (*) MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRMULT (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
}
transition on DIV to state [78]
transition on MULT to state [77]
transition on MOD to state [76]

-------------------
lalr_state [46]: {
  [EXPREQ ::= EXPREQ (*) DIST EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPREQ ::= EXPREQ (*) EQ EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRAND ::= EXPREQ (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON AND OR }]
}
transition on DIST to state [66]
transition on EQ to state [65]

-------------------
lalr_state [47]: {
  [EXPRLAST ::= INT (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [48]: {
  [EXPRLAST ::= CHAR (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [49]: {
  [EXPRUNARY ::= EXPRLAST (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [50]: {
  [EXPRLAST ::= ID (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= ID (*) DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= ID (*) OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= ID (*) DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= ID (*) DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOT to state [100]
transition on OPENBRACKET to state [99]

-------------------
lalr_state [51]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEPAR DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {CLOSEPAR AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEPAR DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {CLOSEPAR AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEPAR DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {CLOSEPAR DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEPAR DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {CLOSEPAR OR }]
  [EXPRLAST ::= OPENPAR (*) EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {CLOSEPAR DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEPAR DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {CLOSEPAR OR }]
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACKET DOT ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {CLOSEPAR DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [97]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [52]: {
  [FOR ::= FORKW OPENPAR ASSIGN SEMICOLON EXPR (*) SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [EXPR ::= EXPR (*) OR EXPRAND , {SEMICOLON OR }]
}
transition on OR to state [89]
transition on SEMICOLON to state [88]

-------------------
lalr_state [53]: {
  [EXPRMULT ::= EXPRUNARY (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [54]: {
  [EXPRADD ::= EXPRADD (*) SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRADD (*) ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRADD (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
}
transition on SUBS to state [74]
transition on ADD to state [73]

-------------------
lalr_state [55]: {
  [EXPRLAST ::= STRING (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [56]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= ADD (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on CHAR to state [48]
transition on NEG to state [44]
transition on IDENTIFIER to state [14]
transition on METHOBJ to state [61]
transition on ID to state [50]
transition on EXPRUNARY to state [87]
transition on DOUBLE to state [62]
transition on ADD to state [56]
transition on EXPRLAST to state [49]
transition on STRING to state [55]
transition on SUBS to state [43]
transition on ATTRIBOBJ to state [57]
transition on ARRAYELEM to state [58]
transition on OPENPAR to state [51]
transition on BOOLVAL to state [60]
transition on INT to state [47]

-------------------
lalr_state [57]: {
  [EXPRLAST ::= ATTRIBOBJ (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [58]: {
  [EXPRLAST ::= ARRAYELEM (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [59]: {
  [EXPRAND ::= EXPRAND (*) AND EXPREQ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON AND OR }]
  [EXPR ::= EXPRAND (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON OR }]
}
transition on AND to state [63]

-------------------
lalr_state [60]: {
  [EXPRLAST ::= BOOLVAL (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [61]: {
  [EXPRLAST ::= METHOBJ (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [62]: {
  [EXPRLAST ::= DOUBLE (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [63]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= EXPRAND AND (*) EXPREQ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [64]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [64]: {
  [EXPREQ ::= EXPREQ (*) DIST EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPREQ ::= EXPREQ (*) EQ EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRAND ::= EXPRAND AND EXPREQ (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON AND OR }]
}
transition on DIST to state [66]
transition on EQ to state [65]

-------------------
lalr_state [65]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= EXPREQ EQ (*) EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [86]

-------------------
lalr_state [66]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= EXPREQ DIST (*) EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [67]

-------------------
lalr_state [67]: {
  [EXPRREL ::= EXPRREL (*) GE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL (*) LT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL (*) LE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= EXPREQ DIST EXPRREL (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRREL ::= EXPRREL (*) GT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
}
transition on GE to state [71]
transition on LE to state [70]
transition on GT to state [69]
transition on LT to state [68]

-------------------
lalr_state [68]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL LT (*) EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [85]
transition on EXPRUNARY to state [53]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]

-------------------
lalr_state [69]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL GT (*) EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [84]
transition on EXPRUNARY to state [53]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]

-------------------
lalr_state [70]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL LE (*) EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [83]
transition on EXPRUNARY to state [53]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]

-------------------
lalr_state [71]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL GE (*) EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [72]
transition on EXPRUNARY to state [53]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]

-------------------
lalr_state [72]: {
  [EXPRREL ::= EXPRREL GE EXPRADD (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRADD (*) SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRADD (*) ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
}
transition on SUBS to state [74]
transition on ADD to state [73]

-------------------
lalr_state [73]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRADD ADD (*) EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on CHAR to state [48]
transition on NEG to state [44]
transition on IDENTIFIER to state [14]
transition on METHOBJ to state [61]
transition on ID to state [50]
transition on DOUBLE to state [62]
transition on EXPRUNARY to state [53]
transition on ADD to state [56]
transition on EXPRLAST to state [49]
transition on STRING to state [55]
transition on SUBS to state [43]
transition on ATTRIBOBJ to state [57]
transition on ARRAYELEM to state [58]
transition on OPENPAR to state [51]
transition on BOOLVAL to state [60]
transition on INT to state [47]
transition on EXPRMULT to state [82]

-------------------
lalr_state [74]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRADD SUBS (*) EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on CHAR to state [48]
transition on NEG to state [44]
transition on IDENTIFIER to state [14]
transition on METHOBJ to state [61]
transition on ID to state [50]
transition on DOUBLE to state [62]
transition on EXPRUNARY to state [53]
transition on ADD to state [56]
transition on EXPRLAST to state [49]
transition on STRING to state [55]
transition on SUBS to state [43]
transition on ATTRIBOBJ to state [57]
transition on ARRAYELEM to state [58]
transition on OPENPAR to state [51]
transition on BOOLVAL to state [60]
transition on INT to state [47]
transition on EXPRMULT to state [75]

-------------------
lalr_state [75]: {
  [EXPRMULT ::= EXPRMULT (*) DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= EXPRMULT (*) MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= EXPRMULT (*) MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRADD SUBS EXPRMULT (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
}
transition on DIV to state [78]
transition on MULT to state [77]
transition on MOD to state [76]

-------------------
lalr_state [76]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= EXPRMULT MOD (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on CHAR to state [48]
transition on NEG to state [44]
transition on IDENTIFIER to state [14]
transition on METHOBJ to state [61]
transition on ID to state [50]
transition on EXPRUNARY to state [81]
transition on DOUBLE to state [62]
transition on ADD to state [56]
transition on EXPRLAST to state [49]
transition on STRING to state [55]
transition on SUBS to state [43]
transition on ATTRIBOBJ to state [57]
transition on ARRAYELEM to state [58]
transition on OPENPAR to state [51]
transition on BOOLVAL to state [60]
transition on INT to state [47]

-------------------
lalr_state [77]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= EXPRMULT MULT (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on CHAR to state [48]
transition on NEG to state [44]
transition on IDENTIFIER to state [14]
transition on METHOBJ to state [61]
transition on ID to state [50]
transition on DOUBLE to state [62]
transition on EXPRUNARY to state [80]
transition on ADD to state [56]
transition on EXPRLAST to state [49]
transition on STRING to state [55]
transition on SUBS to state [43]
transition on ATTRIBOBJ to state [57]
transition on ARRAYELEM to state [58]
transition on OPENPAR to state [51]
transition on BOOLVAL to state [60]
transition on INT to state [47]

-------------------
lalr_state [78]: {
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= EXPRMULT DIV (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on CHAR to state [48]
transition on NEG to state [44]
transition on IDENTIFIER to state [14]
transition on METHOBJ to state [61]
transition on ID to state [50]
transition on EXPRUNARY to state [79]
transition on DOUBLE to state [62]
transition on ADD to state [56]
transition on EXPRLAST to state [49]
transition on STRING to state [55]
transition on SUBS to state [43]
transition on ATTRIBOBJ to state [57]
transition on ARRAYELEM to state [58]
transition on OPENPAR to state [51]
transition on BOOLVAL to state [60]
transition on INT to state [47]

-------------------
lalr_state [79]: {
  [EXPRMULT ::= EXPRMULT DIV EXPRUNARY (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [80]: {
  [EXPRMULT ::= EXPRMULT MULT EXPRUNARY (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [81]: {
  [EXPRMULT ::= EXPRMULT MOD EXPRUNARY (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [82]: {
  [EXPRMULT ::= EXPRMULT (*) DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRADD ADD EXPRMULT (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= EXPRMULT (*) MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= EXPRMULT (*) MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DIV to state [78]
transition on MULT to state [77]
transition on MOD to state [76]

-------------------
lalr_state [83]: {
  [EXPRADD ::= EXPRADD (*) SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL LE EXPRADD (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRADD (*) ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
}
transition on SUBS to state [74]
transition on ADD to state [73]

-------------------
lalr_state [84]: {
  [EXPRADD ::= EXPRADD (*) SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRADD (*) ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL GT EXPRADD (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
}
transition on SUBS to state [74]
transition on ADD to state [73]

-------------------
lalr_state [85]: {
  [EXPRADD ::= EXPRADD (*) SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL LT EXPRADD (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= EXPRADD (*) ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
}
transition on SUBS to state [74]
transition on ADD to state [73]

-------------------
lalr_state [86]: {
  [EXPRREL ::= EXPRREL (*) GE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= EXPREQ EQ EXPRREL (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRREL ::= EXPRREL (*) LT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL (*) LE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= EXPRREL (*) GT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
}
transition on GE to state [71]
transition on LE to state [70]
transition on GT to state [69]
transition on LT to state [68]

-------------------
lalr_state [87]: {
  [EXPRUNARY ::= ADD EXPRUNARY (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [88]: {
  [FOR ::= FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON (*) ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {CLOSEPAR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM }]
}
transition on ASSIGN to state [91]
transition on IDENTIFIER to state [14]
transition on ID to state [39]

-------------------
lalr_state [89]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= EXPR OR (*) EXPRAND , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACE OPENBRACKET CLOSEBRACKET DOT COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [90]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [90]: {
  [EXPRAND ::= EXPRAND (*) AND EXPREQ , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON AND OR }]
  [EXPR ::= EXPR OR EXPRAND (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON OR }]
}
transition on AND to state [63]

-------------------
lalr_state [91]: {
  [FOR ::= FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN (*) CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on CLOSEPAR to state [92]

-------------------
lalr_state [92]: {
  [FOR ::= FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR (*) OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on OPENBRACE to state [93]

-------------------
lalr_state [93]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [FOR ::= FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE (*) STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [94]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [94]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [FOR ::= FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST (*) CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on CLOSEBRACE to state [95]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [95]: {
  [FOR ::= FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [96]: {
  [STMLIST ::= STMLIST STM (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [97]: {
  [EXPRLAST ::= OPENPAR EXPR (*) CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= EXPR (*) OR EXPRAND , {CLOSEPAR OR }]
}
transition on OR to state [89]
transition on CLOSEPAR to state [98]

-------------------
lalr_state [98]: {
  [EXPRLAST ::= OPENPAR EXPR CLOSEPAR (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [99]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEBRACKET DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {CLOSEBRACKET AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEBRACKET DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEBRACKET ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {CLOSEBRACKET AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEBRACKET DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEBRACKET ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {CLOSEBRACKET DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEBRACKET DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {CLOSEBRACKET OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEBRACKET ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {CLOSEBRACKET DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEBRACKET DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {CLOSEBRACKET OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACKET CLOSEBRACKET DOT ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {CLOSEBRACKET DIST EQ AND OR }]
  [ARRAYELEM ::= ID OPENBRACKET (*) EXPR CLOSEBRACKET , {ASSIGNSYM CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEBRACKET ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [109]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [100]: {
  [METHOBJ ::= ID DOT (*) ID OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= ID DOT (*) ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= ID DOT (*) ID , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ID ::= (*) IDENTIFIER , {OPENPAR CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [101]

-------------------
lalr_state [101]: {
  [METHOBJ ::= ID DOT ID (*) OPENPAR CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= ID DOT ID (*) OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= ID DOT ID (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on OPENPAR to state [102]

-------------------
lalr_state [102]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {CLOSEPAR COMMA AND OR }]
  [METHOBJ ::= ID DOT ID OPENPAR (*) EXPRLIST CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {CLOSEPAR COMMA AND OR }]
  [METHOBJ ::= ID DOT ID OPENPAR (*) CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {CLOSEPAR COMMA OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [EXPRLIST ::= (*) EXPRLIST COMMA EXPR , {CLOSEPAR COMMA }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {CLOSEPAR COMMA OR }]
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACKET DOT COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [EXPRLIST ::= (*) EXPR , {CLOSEPAR COMMA }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on EXPRLIST to state [105]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [104]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CLOSEPAR to state [103]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [103]: {
  [METHOBJ ::= ID DOT ID OPENPAR CLOSEPAR (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [104]: {
  [EXPR ::= EXPR (*) OR EXPRAND , {CLOSEPAR COMMA OR }]
  [EXPRLIST ::= EXPR (*) , {CLOSEPAR COMMA }]
}
transition on OR to state [89]

-------------------
lalr_state [105]: {
  [METHOBJ ::= ID DOT ID OPENPAR EXPRLIST (*) CLOSEPAR , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLIST ::= EXPRLIST (*) COMMA EXPR , {CLOSEPAR COMMA }]
}
transition on CLOSEPAR to state [107]
transition on COMMA to state [106]

-------------------
lalr_state [106]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {CLOSEPAR COMMA AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {CLOSEPAR COMMA AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {CLOSEPAR COMMA OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRLIST ::= EXPRLIST COMMA (*) EXPR , {CLOSEPAR COMMA }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {CLOSEPAR COMMA OR }]
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACKET DOT COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [108]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [107]: {
  [METHOBJ ::= ID DOT ID OPENPAR EXPRLIST CLOSEPAR (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [108]: {
  [EXPRLIST ::= EXPRLIST COMMA EXPR (*) , {CLOSEPAR COMMA }]
  [EXPR ::= EXPR (*) OR EXPRAND , {CLOSEPAR COMMA OR }]
}
transition on OR to state [89]

-------------------
lalr_state [109]: {
  [ARRAYELEM ::= ID OPENBRACKET EXPR (*) CLOSEBRACKET , {ASSIGNSYM CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= EXPR (*) OR EXPRAND , {CLOSEBRACKET OR }]
}
transition on OR to state [89]
transition on CLOSEBRACKET to state [110]

-------------------
lalr_state [110]: {
  [ARRAYELEM ::= ID OPENBRACKET EXPR CLOSEBRACKET (*) , {ASSIGNSYM CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [111]: {
  [EXPRUNARY ::= NEG EXPRUNARY (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [112]: {
  [EXPRUNARY ::= SUBS EXPRUNARY (*) , {CLOSEPAR OPENBRACE CLOSEBRACKET COMMA SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}

-------------------
lalr_state [113]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEPAR SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {CLOSEPAR SEMICOLON AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEPAR SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {CLOSEPAR SEMICOLON AND OR }]
  [ASSIGN ::= ID ASSIGNSYM (*) EXPR , {CLOSEPAR SEMICOLON }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEPAR SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {CLOSEPAR SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEPAR SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {CLOSEPAR SEMICOLON OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {CLOSEPAR SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEPAR SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {CLOSEPAR SEMICOLON OR }]
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACKET DOT SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {CLOSEPAR SEMICOLON DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [114]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [114]: {
  [ASSIGN ::= ID ASSIGNSYM EXPR (*) , {CLOSEPAR SEMICOLON }]
  [EXPR ::= EXPR (*) OR EXPRAND , {CLOSEPAR SEMICOLON OR }]
}
transition on OR to state [89]

-------------------
lalr_state [115]: {
  [SWITCH ::= SWITCHKW EXPR (*) OPENBRACE SWITCHBODY CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [EXPR ::= EXPR (*) OR EXPRAND , {OPENBRACE OR }]
}
transition on OR to state [89]
transition on OPENBRACE to state [116]

-------------------
lalr_state [116]: {
  [SWITCHBODY ::= (*) SWITCHBODY SWITCHSTM , {CASEKW CLOSEBRACE }]
  [SWITCH ::= SWITCHKW EXPR OPENBRACE (*) SWITCHBODY CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCHSTM ::= (*) CASEKW INT OPENBRACE STMLIST CLOSEBRACE , {CASEKW CLOSEBRACE }]
  [SWITCHBODY ::= (*) SWITCHSTM , {CASEKW CLOSEBRACE }]
}
transition on SWITCHBODY to state [119]
transition on CASEKW to state [118]
transition on SWITCHSTM to state [117]

-------------------
lalr_state [117]: {
  [SWITCHBODY ::= SWITCHSTM (*) , {CASEKW CLOSEBRACE }]
}

-------------------
lalr_state [118]: {
  [SWITCHSTM ::= CASEKW (*) INT OPENBRACE STMLIST CLOSEBRACE , {CASEKW CLOSEBRACE }]
}
transition on INT to state [122]

-------------------
lalr_state [119]: {
  [SWITCHBODY ::= SWITCHBODY (*) SWITCHSTM , {CASEKW CLOSEBRACE }]
  [SWITCH ::= SWITCHKW EXPR OPENBRACE SWITCHBODY (*) CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCHSTM ::= (*) CASEKW INT OPENBRACE STMLIST CLOSEBRACE , {CASEKW CLOSEBRACE }]
}
transition on CLOSEBRACE to state [121]
transition on CASEKW to state [118]
transition on SWITCHSTM to state [120]

-------------------
lalr_state [120]: {
  [SWITCHBODY ::= SWITCHBODY SWITCHSTM (*) , {CASEKW CLOSEBRACE }]
}

-------------------
lalr_state [121]: {
  [SWITCH ::= SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [122]: {
  [SWITCHSTM ::= CASEKW INT (*) OPENBRACE STMLIST CLOSEBRACE , {CASEKW CLOSEBRACE }]
}
transition on OPENBRACE to state [123]

-------------------
lalr_state [123]: {
  [SWITCHSTM ::= CASEKW INT OPENBRACE (*) STMLIST CLOSEBRACE , {CASEKW CLOSEBRACE }]
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [124]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [124]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCHSTM ::= CASEKW INT OPENBRACE STMLIST (*) CLOSEBRACE , {CASEKW CLOSEBRACE }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]
transition on CLOSEBRACE to state [125]

-------------------
lalr_state [125]: {
  [SWITCHSTM ::= CASEKW INT OPENBRACE STMLIST CLOSEBRACE (*) , {CASEKW CLOSEBRACE }]
}

-------------------
lalr_state [126]: {
  [EXPR ::= EXPR (*) OR EXPRAND , {OPENBRACE OR }]
  [WHILE ::= WHILEKW EXPR (*) OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on OR to state [89]
transition on OPENBRACE to state [127]

-------------------
lalr_state [127]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [WHILE ::= WHILEKW EXPR OPENBRACE (*) STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [128]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [128]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [WHILE ::= WHILEKW EXPR OPENBRACE STMLIST (*) CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on CLOSEBRACE to state [129]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [129]: {
  [WHILE ::= WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [130]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) INT , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {SEMICOLON OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [ASSIGNARRAY ::= ARRAYELEM ASSIGNSYM (*) EXPR , {SEMICOLON }]
  [EXPRLAST ::= (*) CHAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {SEMICOLON OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACKET DOT SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [131]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [131]: {
  [ASSIGNARRAY ::= ARRAYELEM ASSIGNSYM EXPR (*) , {SEMICOLON }]
  [EXPR ::= EXPR (*) OR EXPRAND , {SEMICOLON OR }]
}
transition on OR to state [89]

-------------------
lalr_state [132]: {
  [STM ::= ASSIGN SEMICOLON (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [133]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) INT , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [ASSIGNATTRIB ::= ATTRIBOBJ ASSIGNSYM (*) EXPR , {SEMICOLON }]
  [EXPRLAST ::= (*) BOOLVAL , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {SEMICOLON OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {SEMICOLON OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACKET DOT SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [134]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [134]: {
  [ASSIGNATTRIB ::= ATTRIBOBJ ASSIGNSYM EXPR (*) , {SEMICOLON }]
  [EXPR ::= EXPR (*) OR EXPRAND , {SEMICOLON OR }]
}
transition on OR to state [89]

-------------------
lalr_state [135]: {
  [P ::= CLASSLIST MAINKW OPENBRACE STMLIST CLOSEBRACE (*) , {EOF }]
}

-------------------
lalr_state [136]: {
  [DECL ::= BASICTYPE ID (*) , {SEMICOLON }]
  [DECL ::= BASICTYPE ID (*) ASSIGNSYM EXPR , {SEMICOLON }]
}
transition on ASSIGNSYM to state [146]

-------------------
lalr_state [137]: {
  [ARRAYDECL ::= BASICTYPE OPENBRACKET (*) CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
}
transition on CLOSEBRACKET to state [138]

-------------------
lalr_state [138]: {
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM }]
  [ARRAYDECL ::= BASICTYPE OPENBRACKET CLOSEBRACKET (*) ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [139]

-------------------
lalr_state [139]: {
  [ARRAYDECL ::= BASICTYPE OPENBRACKET CLOSEBRACKET ID (*) ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
}
transition on ASSIGNSYM to state [140]

-------------------
lalr_state [140]: {
  [ARRAYDECL ::= BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM (*) NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
}
transition on NEWKW to state [141]

-------------------
lalr_state [141]: {
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET }]
  [ARRAYDECL ::= BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW (*) BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET }]
}
transition on BASICTYPE to state [142]
transition on STRINGKW to state [10]
transition on INTKW to state [33]
transition on BOOLKW to state [27]
transition on CHARKW to state [29]
transition on DOUBLEKW to state [26]

-------------------
lalr_state [142]: {
  [ARRAYDECL ::= BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE (*) OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
}
transition on OPENBRACKET to state [143]

-------------------
lalr_state [143]: {
  [ARRAYDECL ::= BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET (*) INT CLOSEBRACKET , {SEMICOLON }]
}
transition on INT to state [144]

-------------------
lalr_state [144]: {
  [ARRAYDECL ::= BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT (*) CLOSEBRACKET , {SEMICOLON }]
}
transition on CLOSEBRACKET to state [145]

-------------------
lalr_state [145]: {
  [ARRAYDECL ::= BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET (*) , {SEMICOLON }]
}

-------------------
lalr_state [146]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [DECL ::= BASICTYPE ID ASSIGNSYM (*) EXPR , {SEMICOLON }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) INT , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {SEMICOLON OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {SEMICOLON OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACKET DOT SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [147]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [147]: {
  [DECL ::= BASICTYPE ID ASSIGNSYM EXPR (*) , {SEMICOLON }]
  [EXPR ::= EXPR (*) OR EXPRAND , {SEMICOLON OR }]
}
transition on OR to state [89]

-------------------
lalr_state [148]: {
  [STM ::= ASSIGNARRAY SEMICOLON (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [149]: {
  [STM ::= DECL SEMICOLON (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [150]: {
  [STM ::= ASSIGNATTRIB SEMICOLON (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [151]: {
  [STM ::= NEWDECL SEMICOLON (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [152]: {
  [VOIDMETHOBJ ::= ID DOT (*) ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [ATTRIBOBJ ::= ID DOT (*) ID , {ASSIGNSYM }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENPAR }]
  [VOIDMETHOBJ ::= ID DOT (*) ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [153]

-------------------
lalr_state [153]: {
  [VOIDMETHOBJ ::= ID DOT ID (*) OPENPAR CLOSEPAR , {SEMICOLON }]
  [ATTRIBOBJ ::= ID DOT ID (*) , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= ID DOT ID (*) OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
}
transition on OPENPAR to state [154]

-------------------
lalr_state [154]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {CLOSEPAR COMMA AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [VOIDMETHOBJ ::= ID DOT ID OPENPAR (*) EXPRLIST CLOSEPAR , {SEMICOLON }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {CLOSEPAR COMMA AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [VOIDMETHOBJ ::= ID DOT ID OPENPAR (*) CLOSEPAR , {SEMICOLON }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {CLOSEPAR COMMA OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [EXPRLIST ::= (*) EXPRLIST COMMA EXPR , {CLOSEPAR COMMA }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {CLOSEPAR COMMA OR }]
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACKET DOT COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [EXPRLIST ::= (*) EXPR , {CLOSEPAR COMMA }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on EXPRLIST to state [156]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [104]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CLOSEPAR to state [155]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [155]: {
  [VOIDMETHOBJ ::= ID DOT ID OPENPAR CLOSEPAR (*) , {SEMICOLON }]
}

-------------------
lalr_state [156]: {
  [EXPRLIST ::= EXPRLIST (*) COMMA EXPR , {CLOSEPAR COMMA }]
  [VOIDMETHOBJ ::= ID DOT ID OPENPAR EXPRLIST (*) CLOSEPAR , {SEMICOLON }]
}
transition on CLOSEPAR to state [157]
transition on COMMA to state [106]

-------------------
lalr_state [157]: {
  [VOIDMETHOBJ ::= ID DOT ID OPENPAR EXPRLIST CLOSEPAR (*) , {SEMICOLON }]
}

-------------------
lalr_state [158]: {
  [IF_ELSE ::= IFKW EXPR (*) OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= IFKW EXPR (*) OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [EXPR ::= EXPR (*) OR EXPRAND , {OPENBRACE OR }]
}
transition on OR to state [89]
transition on OPENBRACE to state [159]

-------------------
lalr_state [159]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= IFKW EXPR OPENBRACE (*) STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= IFKW EXPR OPENBRACE (*) STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [160]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [160]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= IFKW EXPR OPENBRACE STMLIST (*) CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= IFKW EXPR OPENBRACE STMLIST (*) CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]
transition on CLOSEBRACE to state [161]

-------------------
lalr_state [161]: {
  [IF_ELSE ::= IFKW EXPR OPENBRACE STMLIST CLOSEBRACE (*) ELSEKW OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= IFKW EXPR OPENBRACE STMLIST CLOSEBRACE (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on ELSEKW to state [162]

-------------------
lalr_state [162]: {
  [IF_ELSE ::= IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW (*) OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on OPENBRACE to state [163]

-------------------
lalr_state [163]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE (*) STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [164]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [164]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [IF_ELSE ::= IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST (*) CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]
transition on CLOSEBRACE to state [165]

-------------------
lalr_state [165]: {
  [IF_ELSE ::= IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [166]: {
  [STM ::= ARRAYDECL SEMICOLON (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [167]: {
  [STM ::= VOIDMETHOBJ SEMICOLON (*) , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}

-------------------
lalr_state [168]: {
  [NEWDECL ::= CLASSNAME ID (*) ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
}
transition on ASSIGNSYM to state [169]

-------------------
lalr_state [169]: {
  [NEWDECL ::= CLASSNAME ID ASSIGNSYM (*) NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
}
transition on NEWKW to state [170]

-------------------
lalr_state [170]: {
  [NEWDECL ::= CLASSNAME ID ASSIGNSYM NEWKW (*) CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {OPENPAR }]
}
transition on CLASSNAMESTR to state [16]
transition on CLASSNAME to state [171]

-------------------
lalr_state [171]: {
  [NEWDECL ::= CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME (*) OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
}
transition on OPENPAR to state [172]

-------------------
lalr_state [172]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {CLOSEPAR COMMA AND OR }]
  [EXPRLAST ::= (*) INT , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {CLOSEPAR COMMA AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [NEWDECL ::= CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR (*) EXPRLIST CLOSEPAR , {SEMICOLON }]
  [EXPRLAST ::= (*) BOOLVAL , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {CLOSEPAR COMMA OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {CLOSEPAR COMMA ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [EXPRLIST ::= (*) EXPRLIST COMMA EXPR , {CLOSEPAR COMMA }]
  [EXPRLAST ::= (*) CHAR , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {CLOSEPAR COMMA DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {CLOSEPAR COMMA OR }]
  [ID ::= (*) IDENTIFIER , {CLOSEPAR OPENBRACKET DOT COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {CLOSEPAR COMMA DIST EQ AND OR }]
  [EXPRLIST ::= (*) EXPR , {CLOSEPAR COMMA }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {CLOSEPAR COMMA ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on EXPRLIST to state [173]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [104]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [173]: {
  [NEWDECL ::= CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST (*) CLOSEPAR , {SEMICOLON }]
  [EXPRLIST ::= EXPRLIST (*) COMMA EXPR , {CLOSEPAR COMMA }]
}
transition on CLOSEPAR to state [174]
transition on COMMA to state [106]

-------------------
lalr_state [174]: {
  [NEWDECL ::= CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR (*) , {SEMICOLON }]
}

-------------------
lalr_state [175]: {
  [CLASSDEF ::= CLASSKW CLASSNAME (*) OPENBRACE METHLIST ATTRIBLIST CLOSEBRACE , {MAINKW CLASSKW }]
  [CLASSDEF ::= CLASSKW CLASSNAME (*) OPENBRACE ATTRIBLIST METHLIST CLOSEBRACE , {MAINKW CLASSKW }]
}
transition on OPENBRACE to state [176]

-------------------
lalr_state [176]: {
  [CLASSDEF ::= CLASSKW CLASSNAME OPENBRACE (*) ATTRIBLIST METHLIST CLOSEBRACE , {MAINKW CLASSKW }]
  [CONSTRUCTOR ::= (*) PUBLICKW CLASSNAME MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [ATTRIBLIST ::= (*) ATTRIBDECL SEMICOLON , {PUBLICKW PRIVATEKW }]
  [METHLIST ::= (*) CONSTRUCTOR , {PUBLICKW PRIVATEKW }]
  [ATTRIBDECL ::= (*) PRIVATEKW BASICTYPE ID , {SEMICOLON }]
  [ATTRIBLIST ::= (*) ATTRIBLIST ATTRIBDECL SEMICOLON , {PUBLICKW PRIVATEKW }]
  [CLASSDEF ::= CLASSKW CLASSNAME OPENBRACE (*) METHLIST ATTRIBLIST CLOSEBRACE , {MAINKW CLASSKW }]
  [METHLIST ::= (*) METHLIST METHOD , {PUBLICKW PRIVATEKW }]
  [ATTRIBDECL ::= (*) PUBLICKW BASICTYPE ID , {SEMICOLON }]
}
transition on PUBLICKW to state [182]
transition on ATTRIBDECL to state [181]
transition on ATTRIBLIST to state [180]
transition on PRIVATEKW to state [179]
transition on CONSTRUCTOR to state [178]
transition on METHLIST to state [177]

-------------------
lalr_state [177]: {
  [METHOD ::= (*) PRIVATEKW VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [METHOD ::= (*) PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [ATTRIBLIST ::= (*) ATTRIBDECL SEMICOLON , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHOD ::= (*) PUBLICKW VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [METHOD ::= (*) PUBLICKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [ATTRIBDECL ::= (*) PRIVATEKW BASICTYPE ID , {SEMICOLON }]
  [ATTRIBLIST ::= (*) ATTRIBLIST ATTRIBDECL SEMICOLON , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHOD ::= (*) PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [CLASSDEF ::= CLASSKW CLASSNAME OPENBRACE METHLIST (*) ATTRIBLIST CLOSEBRACE , {MAINKW CLASSKW }]
  [METHLIST ::= METHLIST (*) METHOD , {PUBLICKW PRIVATEKW }]
  [METHOD ::= (*) PUBLICKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [ATTRIBDECL ::= (*) PUBLICKW BASICTYPE ID , {SEMICOLON }]
}
transition on PUBLICKW to state [249]
transition on ATTRIBDECL to state [181]
transition on METHOD to state [205]
transition on PRIVATEKW to state [248]
transition on ATTRIBLIST to state [247]

-------------------
lalr_state [178]: {
  [METHLIST ::= CONSTRUCTOR (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [179]: {
  [BASICTYPE ::= (*) DOUBLEKW , {IDENTIFIER }]
  [ATTRIBDECL ::= PRIVATEKW (*) BASICTYPE ID , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) BOOLKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) CHARKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) INTKW , {IDENTIFIER }]
}
transition on BASICTYPE to state [245]
transition on STRINGKW to state [10]
transition on INTKW to state [33]
transition on BOOLKW to state [27]
transition on CHARKW to state [29]
transition on DOUBLEKW to state [26]

-------------------
lalr_state [180]: {
  [METHLIST ::= (*) CONSTRUCTOR , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [ATTRIBDECL ::= (*) PRIVATEKW BASICTYPE ID , {SEMICOLON }]
  [ATTRIBLIST ::= ATTRIBLIST (*) ATTRIBDECL SEMICOLON , {PUBLICKW PRIVATEKW }]
  [METHLIST ::= (*) METHLIST METHOD , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [ATTRIBDECL ::= (*) PUBLICKW BASICTYPE ID , {SEMICOLON }]
  [CLASSDEF ::= CLASSKW CLASSNAME OPENBRACE ATTRIBLIST (*) METHLIST CLOSEBRACE , {MAINKW CLASSKW }]
  [CONSTRUCTOR ::= (*) PUBLICKW CLASSNAME MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on PUBLICKW to state [182]
transition on ATTRIBDECL to state [201]
transition on PRIVATEKW to state [179]
transition on CONSTRUCTOR to state [178]
transition on METHLIST to state [200]

-------------------
lalr_state [181]: {
  [ATTRIBLIST ::= ATTRIBDECL (*) SEMICOLON , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on SEMICOLON to state [199]

-------------------
lalr_state [182]: {
  [BASICTYPE ::= (*) DOUBLEKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) STRINGKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) BOOLKW , {IDENTIFIER }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {OPENPAR }]
  [ATTRIBDECL ::= PUBLICKW (*) BASICTYPE ID , {SEMICOLON }]
  [BASICTYPE ::= (*) CHARKW , {IDENTIFIER }]
  [CONSTRUCTOR ::= PUBLICKW (*) CLASSNAME MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [BASICTYPE ::= (*) INTKW , {IDENTIFIER }]
}
transition on CLASSNAMESTR to state [16]
transition on BASICTYPE to state [184]
transition on STRINGKW to state [10]
transition on INTKW to state [33]
transition on BOOLKW to state [27]
transition on CLASSNAME to state [183]
transition on CHARKW to state [29]
transition on DOUBLEKW to state [26]

-------------------
lalr_state [183]: {
  [MPARAMS ::= (*) OPENPAR MPARAMSLIST CLOSEPAR , {OPENBRACE }]
  [CONSTRUCTOR ::= PUBLICKW CLASSNAME (*) MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [MPARAMS ::= (*) OPENPAR CLOSEPAR , {OPENBRACE }]
}
transition on OPENPAR to state [187]
transition on MPARAMS to state [186]

-------------------
lalr_state [184]: {
  [ATTRIBDECL ::= PUBLICKW BASICTYPE (*) ID , {SEMICOLON }]
  [ID ::= (*) IDENTIFIER , {SEMICOLON }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [185]

-------------------
lalr_state [185]: {
  [ATTRIBDECL ::= PUBLICKW BASICTYPE ID (*) , {SEMICOLON }]
}

-------------------
lalr_state [186]: {
  [CONSTRUCTOR ::= PUBLICKW CLASSNAME MPARAMS (*) OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on OPENBRACE to state [196]

-------------------
lalr_state [187]: {
  [BASICTYPE ::= (*) STRINGKW , {IDENTIFIER }]
  [MPARAMS ::= OPENPAR (*) CLOSEPAR , {OPENBRACE }]
  [MPARAM ::= (*) BASICTYPE ID , {CLOSEPAR COMMA }]
  [BASICTYPE ::= (*) BOOLKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) CHARKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) INTKW , {IDENTIFIER }]
  [MPARAMS ::= OPENPAR (*) MPARAMSLIST CLOSEPAR , {OPENBRACE }]
  [MPARAMSLIST ::= (*) MPARAM , {CLOSEPAR COMMA }]
  [BASICTYPE ::= (*) DOUBLEKW , {IDENTIFIER }]
  [MPARAMSLIST ::= (*) MPARAMSLIST COMMA MPARAM , {CLOSEPAR COMMA }]
}
transition on STRINGKW to state [10]
transition on INTKW to state [33]
transition on MPARAM to state [191]
transition on MPARAMSLIST to state [190]
transition on CLOSEPAR to state [189]
transition on BOOLKW to state [27]
transition on CHARKW to state [29]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [188]

-------------------
lalr_state [188]: {
  [MPARAM ::= BASICTYPE (*) ID , {CLOSEPAR COMMA }]
  [ID ::= (*) IDENTIFIER , {CLOSEPAR COMMA }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [195]

-------------------
lalr_state [189]: {
  [MPARAMS ::= OPENPAR CLOSEPAR (*) , {OPENBRACE }]
}

-------------------
lalr_state [190]: {
  [MPARAMS ::= OPENPAR MPARAMSLIST (*) CLOSEPAR , {OPENBRACE }]
  [MPARAMSLIST ::= MPARAMSLIST (*) COMMA MPARAM , {CLOSEPAR COMMA }]
}
transition on CLOSEPAR to state [193]
transition on COMMA to state [192]

-------------------
lalr_state [191]: {
  [MPARAMSLIST ::= MPARAM (*) , {CLOSEPAR COMMA }]
}

-------------------
lalr_state [192]: {
  [BASICTYPE ::= (*) DOUBLEKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) STRINGKW , {IDENTIFIER }]
  [MPARAMSLIST ::= MPARAMSLIST COMMA (*) MPARAM , {CLOSEPAR COMMA }]
  [BASICTYPE ::= (*) BOOLKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) CHARKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) INTKW , {IDENTIFIER }]
  [MPARAM ::= (*) BASICTYPE ID , {CLOSEPAR COMMA }]
}
transition on BASICTYPE to state [188]
transition on STRINGKW to state [10]
transition on INTKW to state [33]
transition on BOOLKW to state [27]
transition on CHARKW to state [29]
transition on DOUBLEKW to state [26]
transition on MPARAM to state [194]

-------------------
lalr_state [193]: {
  [MPARAMS ::= OPENPAR MPARAMSLIST CLOSEPAR (*) , {OPENBRACE }]
}

-------------------
lalr_state [194]: {
  [MPARAMSLIST ::= MPARAMSLIST COMMA MPARAM (*) , {CLOSEPAR COMMA }]
}

-------------------
lalr_state [195]: {
  [MPARAM ::= BASICTYPE ID (*) , {CLOSEPAR COMMA }]
}

-------------------
lalr_state [196]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [CONSTRUCTOR ::= PUBLICKW CLASSNAME MPARAMS OPENBRACE (*) STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [197]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [197]: {
  [CONSTRUCTOR ::= PUBLICKW CLASSNAME MPARAMS OPENBRACE STMLIST (*) CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on CLOSEBRACE to state [198]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [198]: {
  [CONSTRUCTOR ::= PUBLICKW CLASSNAME MPARAMS OPENBRACE STMLIST CLOSEBRACE (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [199]: {
  [ATTRIBLIST ::= ATTRIBDECL SEMICOLON (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [200]: {
  [METHOD ::= (*) PUBLICKW VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHOD ::= (*) PUBLICKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHOD ::= (*) PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHOD ::= (*) PUBLICKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHLIST ::= METHLIST (*) METHOD , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHOD ::= (*) PRIVATEKW VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [CLASSDEF ::= CLASSKW CLASSNAME OPENBRACE ATTRIBLIST METHLIST (*) CLOSEBRACE , {MAINKW CLASSKW }]
  [METHOD ::= (*) PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on PUBLICKW to state [206]
transition on METHOD to state [205]
transition on CLOSEBRACE to state [204]
transition on PRIVATEKW to state [203]

-------------------
lalr_state [201]: {
  [ATTRIBLIST ::= ATTRIBLIST ATTRIBDECL (*) SEMICOLON , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on SEMICOLON to state [202]

-------------------
lalr_state [202]: {
  [ATTRIBLIST ::= ATTRIBLIST ATTRIBDECL SEMICOLON (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [203]: {
  [BASICTYPE ::= (*) DOUBLEKW , {IDENTIFIER }]
  [METHOD ::= PRIVATEKW (*) BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [BASICTYPE ::= (*) STRINGKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) BOOLKW , {IDENTIFIER }]
  [METHOD ::= PRIVATEKW (*) VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHOD ::= PRIVATEKW (*) BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [BASICTYPE ::= (*) CHARKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) INTKW , {IDENTIFIER }]
}
transition on BASICTYPE to state [227]
transition on STRINGKW to state [10]
transition on INTKW to state [33]
transition on BOOLKW to state [27]
transition on VOIDKW to state [226]
transition on CHARKW to state [29]
transition on DOUBLEKW to state [26]

-------------------
lalr_state [204]: {
  [CLASSDEF ::= CLASSKW CLASSNAME OPENBRACE ATTRIBLIST METHLIST CLOSEBRACE (*) , {MAINKW CLASSKW }]
}

-------------------
lalr_state [205]: {
  [METHLIST ::= METHLIST METHOD (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [206]: {
  [METHOD ::= PUBLICKW (*) BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [BASICTYPE ::= (*) DOUBLEKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) STRINGKW , {IDENTIFIER }]
  [METHOD ::= PUBLICKW (*) BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [BASICTYPE ::= (*) BOOLKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) CHARKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) INTKW , {IDENTIFIER }]
  [METHOD ::= PUBLICKW (*) VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on BASICTYPE to state [208]
transition on STRINGKW to state [10]
transition on INTKW to state [33]
transition on BOOLKW to state [27]
transition on VOIDKW to state [207]
transition on CHARKW to state [29]
transition on DOUBLEKW to state [26]

-------------------
lalr_state [207]: {
  [METHOD ::= PUBLICKW VOIDKW (*) ID MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [ID ::= (*) IDENTIFIER , {OPENPAR }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [221]

-------------------
lalr_state [208]: {
  [METHOD ::= PUBLICKW BASICTYPE (*) ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [ID ::= (*) IDENTIFIER , {OPENPAR }]
  [METHOD ::= PUBLICKW BASICTYPE (*) ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [209]

-------------------
lalr_state [209]: {
  [METHOD ::= PUBLICKW BASICTYPE ID (*) MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [MPARAMS ::= (*) OPENPAR MPARAMSLIST CLOSEPAR , {OPENBRACE }]
  [METHOD ::= PUBLICKW BASICTYPE ID (*) MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [MPARAMS ::= (*) OPENPAR CLOSEPAR , {OPENBRACE }]
}
transition on OPENPAR to state [187]
transition on MPARAMS to state [210]

-------------------
lalr_state [210]: {
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS (*) OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS (*) OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on OPENBRACE to state [211]

-------------------
lalr_state [211]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE (*) STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE (*) RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on RETURNKW to state [213]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [212]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [212]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE STMLIST (*) RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on RETURNKW to state [217]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [213]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) INT , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW (*) EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {SEMICOLON OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {SEMICOLON OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACKET DOT SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [214]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [214]: {
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR (*) SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [EXPR ::= EXPR (*) OR EXPRAND , {SEMICOLON OR }]
}
transition on OR to state [89]
transition on SEMICOLON to state [215]

-------------------
lalr_state [215]: {
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON (*) CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on CLOSEBRACE to state [216]

-------------------
lalr_state [216]: {
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [217]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) INT , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW (*) EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {SEMICOLON OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {SEMICOLON OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACKET DOT SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [218]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [218]: {
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR (*) SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [EXPR ::= EXPR (*) OR EXPRAND , {SEMICOLON OR }]
}
transition on OR to state [89]
transition on SEMICOLON to state [219]

-------------------
lalr_state [219]: {
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON (*) CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on CLOSEBRACE to state [220]

-------------------
lalr_state [220]: {
  [METHOD ::= PUBLICKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [221]: {
  [MPARAMS ::= (*) OPENPAR MPARAMSLIST CLOSEPAR , {OPENBRACE }]
  [METHOD ::= PUBLICKW VOIDKW ID (*) MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [MPARAMS ::= (*) OPENPAR CLOSEPAR , {OPENBRACE }]
}
transition on OPENPAR to state [187]
transition on MPARAMS to state [222]

-------------------
lalr_state [222]: {
  [METHOD ::= PUBLICKW VOIDKW ID MPARAMS (*) OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on OPENBRACE to state [223]

-------------------
lalr_state [223]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [METHOD ::= PUBLICKW VOIDKW ID MPARAMS OPENBRACE (*) STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [224]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [224]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [METHOD ::= PUBLICKW VOIDKW ID MPARAMS OPENBRACE STMLIST (*) CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on CLOSEBRACE to state [225]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [225]: {
  [METHOD ::= PUBLICKW VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [226]: {
  [METHOD ::= PRIVATEKW VOIDKW (*) ID MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [ID ::= (*) IDENTIFIER , {OPENPAR }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [240]

-------------------
lalr_state [227]: {
  [METHOD ::= PRIVATEKW BASICTYPE (*) ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHOD ::= PRIVATEKW BASICTYPE (*) ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [ID ::= (*) IDENTIFIER , {OPENPAR }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [228]

-------------------
lalr_state [228]: {
  [METHOD ::= PRIVATEKW BASICTYPE ID (*) MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [MPARAMS ::= (*) OPENPAR MPARAMSLIST CLOSEPAR , {OPENBRACE }]
  [METHOD ::= PRIVATEKW BASICTYPE ID (*) MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [MPARAMS ::= (*) OPENPAR CLOSEPAR , {OPENBRACE }]
}
transition on OPENPAR to state [187]
transition on MPARAMS to state [229]

-------------------
lalr_state [229]: {
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS (*) OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS (*) OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on OPENBRACE to state [230]

-------------------
lalr_state [230]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE (*) STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE (*) RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on RETURNKW to state [232]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [231]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [231]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE STMLIST (*) RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {RETURNKW WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on RETURNKW to state [236]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [232]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) INT , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {SEMICOLON OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {SEMICOLON OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACKET DOT SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW (*) EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [EXPREQ ::= (*) EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [233]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [233]: {
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR (*) SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [EXPR ::= EXPR (*) OR EXPRAND , {SEMICOLON OR }]
}
transition on OR to state [89]
transition on SEMICOLON to state [234]

-------------------
lalr_state [234]: {
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON (*) CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on CLOSEBRACE to state [235]

-------------------
lalr_state [235]: {
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [236]: {
  [EXPRUNARY ::= (*) SUBS EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPRAND AND EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) INT , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT DIV EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ATTRIBOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) NEG EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD ADD EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPRAND ::= (*) EXPREQ , {SEMICOLON AND OR }]
  [EXPRLAST ::= (*) DOUBLE , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MOD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GT EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [METHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) METHOBJ , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) EXPRLAST , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRADD ::= (*) EXPRADD SUBS EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ EQ EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) BOOLVAL , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL LE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPR OR EXPRAND , {SEMICOLON OR }]
  [EXPRLAST ::= (*) ARRAYELEM , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) OPENPAR EXPR CLOSEPAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW (*) EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [EXPRADD ::= (*) EXPRMULT , {SEMICOLON ADD SUBS DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPREQ DIST EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [EXPRLAST ::= (*) CHAR , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRUNARY ::= (*) ADD EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRREL ::= (*) EXPRREL GE EXPRADD , {SEMICOLON DIST EQ LT GT LE GE AND OR }]
  [EXPR ::= (*) EXPRAND , {SEMICOLON OR }]
  [ID ::= (*) IDENTIFIER , {OPENBRACKET DOT SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) ID , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRMULT ::= (*) EXPRMULT MULT EXPRUNARY , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPREQ ::= (*) EXPRREL , {SEMICOLON DIST EQ AND OR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
  [EXPRLAST ::= (*) STRING , {SEMICOLON ADD SUBS MULT DIV MOD DIST EQ LT GT LE GE AND OR }]
}
transition on DOUBLE to state [62]
transition on METHOBJ to state [61]
transition on BOOLVAL to state [60]
transition on EXPRAND to state [59]
transition on ARRAYELEM to state [58]
transition on ATTRIBOBJ to state [57]
transition on ADD to state [56]
transition on STRING to state [55]
transition on EXPRADD to state [54]
transition on EXPRUNARY to state [53]
transition on EXPR to state [237]
transition on OPENPAR to state [51]
transition on ID to state [50]
transition on EXPRLAST to state [49]
transition on IDENTIFIER to state [14]
transition on CHAR to state [48]
transition on INT to state [47]
transition on EXPREQ to state [46]
transition on EXPRMULT to state [45]
transition on NEG to state [44]
transition on SUBS to state [43]
transition on EXPRREL to state [42]

-------------------
lalr_state [237]: {
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR (*) SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [EXPR ::= EXPR (*) OR EXPRAND , {SEMICOLON OR }]
}
transition on OR to state [89]
transition on SEMICOLON to state [238]

-------------------
lalr_state [238]: {
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON (*) CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on CLOSEBRACE to state [239]

-------------------
lalr_state [239]: {
  [METHOD ::= PRIVATEKW BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [240]: {
  [MPARAMS ::= (*) OPENPAR MPARAMSLIST CLOSEPAR , {OPENBRACE }]
  [METHOD ::= PRIVATEKW VOIDKW ID (*) MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [MPARAMS ::= (*) OPENPAR CLOSEPAR , {OPENBRACE }]
}
transition on OPENPAR to state [187]
transition on MPARAMS to state [241]

-------------------
lalr_state [241]: {
  [METHOD ::= PRIVATEKW VOIDKW ID MPARAMS (*) OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}
transition on OPENBRACE to state [242]

-------------------
lalr_state [242]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [METHOD ::= PRIVATEKW VOIDKW ID MPARAMS OPENBRACE (*) STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [243]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [243]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [METHOD ::= PRIVATEKW VOIDKW ID MPARAMS OPENBRACE STMLIST (*) CLOSEBRACE , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on CLOSEBRACE to state [244]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [244]: {
  [METHOD ::= PRIVATEKW VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE (*) , {PUBLICKW PRIVATEKW CLOSEBRACE }]
}

-------------------
lalr_state [245]: {
  [ATTRIBDECL ::= PRIVATEKW BASICTYPE (*) ID , {SEMICOLON }]
  [ID ::= (*) IDENTIFIER , {SEMICOLON }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [246]

-------------------
lalr_state [246]: {
  [ATTRIBDECL ::= PRIVATEKW BASICTYPE ID (*) , {SEMICOLON }]
}

-------------------
lalr_state [247]: {
  [ATTRIBDECL ::= (*) PRIVATEKW BASICTYPE ID , {SEMICOLON }]
  [CLASSDEF ::= CLASSKW CLASSNAME OPENBRACE METHLIST ATTRIBLIST (*) CLOSEBRACE , {MAINKW CLASSKW }]
  [ATTRIBLIST ::= ATTRIBLIST (*) ATTRIBDECL SEMICOLON , {PUBLICKW PRIVATEKW CLOSEBRACE }]
  [ATTRIBDECL ::= (*) PUBLICKW BASICTYPE ID , {SEMICOLON }]
}
transition on PUBLICKW to state [255]
transition on ATTRIBDECL to state [201]
transition on CLOSEBRACE to state [254]
transition on PRIVATEKW to state [179]

-------------------
lalr_state [248]: {
  [METHOD ::= PRIVATEKW (*) BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [BASICTYPE ::= (*) STRINGKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) BOOLKW , {IDENTIFIER }]
  [ATTRIBDECL ::= PRIVATEKW (*) BASICTYPE ID , {SEMICOLON }]
  [BASICTYPE ::= (*) CHARKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) INTKW , {IDENTIFIER }]
  [METHOD ::= PRIVATEKW (*) BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [BASICTYPE ::= (*) DOUBLEKW , {IDENTIFIER }]
  [METHOD ::= PRIVATEKW (*) VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW }]
}
transition on BASICTYPE to state [252]
transition on STRINGKW to state [10]
transition on INTKW to state [33]
transition on BOOLKW to state [27]
transition on VOIDKW to state [226]
transition on CHARKW to state [29]
transition on DOUBLEKW to state [26]

-------------------
lalr_state [249]: {
  [BASICTYPE ::= (*) STRINGKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) BOOLKW , {IDENTIFIER }]
  [METHOD ::= PUBLICKW (*) VOIDKW ID MPARAMS OPENBRACE STMLIST CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [METHOD ::= PUBLICKW (*) BASICTYPE ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [BASICTYPE ::= (*) CHARKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) INTKW , {IDENTIFIER }]
  [METHOD ::= PUBLICKW (*) BASICTYPE ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [ATTRIBDECL ::= PUBLICKW (*) BASICTYPE ID , {SEMICOLON }]
  [BASICTYPE ::= (*) DOUBLEKW , {IDENTIFIER }]
}
transition on BASICTYPE to state [250]
transition on STRINGKW to state [10]
transition on INTKW to state [33]
transition on BOOLKW to state [27]
transition on VOIDKW to state [207]
transition on CHARKW to state [29]
transition on DOUBLEKW to state [26]

-------------------
lalr_state [250]: {
  [METHOD ::= PUBLICKW BASICTYPE (*) ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [ATTRIBDECL ::= PUBLICKW BASICTYPE (*) ID , {SEMICOLON }]
  [ID ::= (*) IDENTIFIER , {OPENPAR SEMICOLON }]
  [METHOD ::= PUBLICKW BASICTYPE (*) ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [251]

-------------------
lalr_state [251]: {
  [METHOD ::= PUBLICKW BASICTYPE ID (*) MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [MPARAMS ::= (*) OPENPAR MPARAMSLIST CLOSEPAR , {OPENBRACE }]
  [ATTRIBDECL ::= PUBLICKW BASICTYPE ID (*) , {SEMICOLON }]
  [METHOD ::= PUBLICKW BASICTYPE ID (*) MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [MPARAMS ::= (*) OPENPAR CLOSEPAR , {OPENBRACE }]
}
transition on OPENPAR to state [187]
transition on MPARAMS to state [210]

-------------------
lalr_state [252]: {
  [ATTRIBDECL ::= PRIVATEKW BASICTYPE (*) ID , {SEMICOLON }]
  [METHOD ::= PRIVATEKW BASICTYPE (*) ID MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [METHOD ::= PRIVATEKW BASICTYPE (*) ID MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [ID ::= (*) IDENTIFIER , {OPENPAR SEMICOLON }]
}
transition on IDENTIFIER to state [14]
transition on ID to state [253]

-------------------
lalr_state [253]: {
  [ATTRIBDECL ::= PRIVATEKW BASICTYPE ID (*) , {SEMICOLON }]
  [METHOD ::= PRIVATEKW BASICTYPE ID (*) MPARAMS OPENBRACE RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [MPARAMS ::= (*) OPENPAR MPARAMSLIST CLOSEPAR , {OPENBRACE }]
  [METHOD ::= PRIVATEKW BASICTYPE ID (*) MPARAMS OPENBRACE STMLIST RETURNKW EXPR SEMICOLON CLOSEBRACE , {PUBLICKW PRIVATEKW }]
  [MPARAMS ::= (*) OPENPAR CLOSEPAR , {OPENBRACE }]
}
transition on OPENPAR to state [187]
transition on MPARAMS to state [229]

-------------------
lalr_state [254]: {
  [CLASSDEF ::= CLASSKW CLASSNAME OPENBRACE METHLIST ATTRIBLIST CLOSEBRACE (*) , {MAINKW CLASSKW }]
}

-------------------
lalr_state [255]: {
  [BASICTYPE ::= (*) DOUBLEKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) STRINGKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) BOOLKW , {IDENTIFIER }]
  [ATTRIBDECL ::= PUBLICKW (*) BASICTYPE ID , {SEMICOLON }]
  [BASICTYPE ::= (*) CHARKW , {IDENTIFIER }]
  [BASICTYPE ::= (*) INTKW , {IDENTIFIER }]
}
transition on BASICTYPE to state [184]
transition on STRINGKW to state [10]
transition on INTKW to state [33]
transition on BOOLKW to state [27]
transition on CHARKW to state [29]
transition on DOUBLEKW to state [26]

-------------------
lalr_state [256]: {
  [$START ::= P EOF (*) , {EOF }]
}

-------------------
lalr_state [257]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [P ::= MAINKW OPENBRACE (*) STMLIST CLOSEBRACE , {EOF }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STMLIST STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STMLIST ::= (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [34]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on STMLIST to state [258]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [258]: {
  [BASICTYPE ::= (*) CHARKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) ASSIGNARRAY SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [CLASSNAME ::= (*) CLASSNAMESTR , {IDENTIFIER }]
  [FOR ::= (*) FORKW OPENPAR ASSIGN SEMICOLON EXPR SEMICOLON ASSIGN CLOSEPAR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYDECL ::= (*) BASICTYPE OPENBRACKET CLOSEBRACKET ID ASSIGNSYM NEWKW BASICTYPE OPENBRACKET INT CLOSEBRACKET , {SEMICOLON }]
  [STM ::= (*) VOIDMETHOBJ SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) NEWDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [BASICTYPE ::= (*) STRINGKW , {OPENBRACKET IDENTIFIER }]
  [ASSIGN ::= (*) ID ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) WHILE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [SWITCH ::= (*) SWITCHKW EXPR OPENBRACE SWITCHBODY CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) INTKW , {OPENBRACKET IDENTIFIER }]
  [STM ::= (*) ARRAYDECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [P ::= MAINKW OPENBRACE STMLIST (*) CLOSEBRACE , {EOF }]
  [STM ::= (*) DECL SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ATTRIBOBJ ::= (*) ID DOT ID , {ASSIGNSYM }]
  [VOIDMETHOBJ ::= (*) ID DOT ID OPENPAR CLOSEPAR , {SEMICOLON }]
  [WHILE ::= (*) WHILEKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNATTRIB ::= (*) ATTRIBOBJ ASSIGNSYM EXPR , {SEMICOLON }]
  [STM ::= (*) FOR , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) BOOLKW , {OPENBRACKET IDENTIFIER }]
  [NEWDECL ::= (*) CLASSNAME ID ASSIGNSYM NEWKW CLASSNAME OPENPAR EXPRLIST CLOSEPAR , {SEMICOLON }]
  [STM ::= (*) ASSIGN SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE ELSEKW OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ASSIGNARRAY ::= (*) ARRAYELEM ASSIGNSYM EXPR , {SEMICOLON }]
  [STMLIST ::= STMLIST (*) STM , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [STM ::= (*) SWITCH , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [BASICTYPE ::= (*) DOUBLEKW , {OPENBRACKET IDENTIFIER }]
  [DECL ::= (*) BASICTYPE ID , {SEMICOLON }]
  [STM ::= (*) ASSIGNATTRIB SEMICOLON , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ID ::= (*) IDENTIFIER , {ASSIGNSYM OPENBRACKET DOT }]
  [IF_ELSE ::= (*) IFKW EXPR OPENBRACE STMLIST CLOSEBRACE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
  [ARRAYELEM ::= (*) ID OPENBRACKET EXPR CLOSEBRACKET , {ASSIGNSYM }]
  [STM ::= (*) IF_ELSE , {WHILEKW FORKW IFKW SWITCHKW INTKW DOUBLEKW BOOLKW CHARKW STRINGKW CLOSEBRACE IDENTIFIER CLASSNAMESTR }]
}
transition on FORKW to state [37]
transition on SWITCHKW to state [36]
transition on FOR to state [35]
transition on STM to state [96]
transition on INTKW to state [33]
transition on WHILEKW to state [32]
transition on ARRAYELEM to state [31]
transition on ASSIGN to state [30]
transition on CHARKW to state [29]
transition on ATTRIBOBJ to state [28]
transition on BOOLKW to state [27]
transition on DOUBLEKW to state [26]
transition on BASICTYPE to state [24]
transition on ASSIGNARRAY to state [23]
transition on DECL to state [22]
transition on ASSIGNATTRIB to state [21]
transition on NEWDECL to state [20]
transition on ID to state [19]
transition on IF_ELSE to state [18]
transition on SWITCH to state [17]
transition on CLASSNAMESTR to state [16]
transition on IFKW to state [15]
transition on IDENTIFIER to state [14]
transition on WHILE to state [13]
transition on ARRAYDECL to state [12]
transition on CLOSEBRACE to state [259]
transition on VOIDMETHOBJ to state [11]
transition on STRINGKW to state [10]
transition on CLASSNAME to state [9]

-------------------
lalr_state [259]: {
  [P ::= MAINKW OPENBRACE STMLIST CLOSEBRACE (*) , {EOF }]
}

-------------------
------- CUP v0.11b 20150930 (SVN rev 66) Parser Generation Summary -------
  0 errors and 0 warnings
  51 terminals, 41 non-terminals, and 101 productions declared, 
  producing 260 unique parse states.
  0 terminals declared but not used.
  0 non-terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (0 expected).
  Code written to "SyntacticAnalyzerTiny.java", and "LexicalClass.java".
---------------------------------------------------- (CUP v0.11b 20150930 (SVN rev 66))
